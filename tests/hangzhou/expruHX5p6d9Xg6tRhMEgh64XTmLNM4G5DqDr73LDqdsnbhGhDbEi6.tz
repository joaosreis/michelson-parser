{ parameter
    (or (or (or (address %addToWhitelist) (unit %default))
            (or (set %distribute address) (address %removeFromWhitelist)))
        (or (timestamp %updateLock) (address %withdraw))) ;
  storage
    (pair (big_map %metadata string bytes)
          (pair (pair %sale
                   (pair %token (address %address) (nat %tokenId))
                   (pair (mutez %price)
                         (pair (nat %soldAmount)
                               (pair (nat %saleSupply)
                                     (pair (timestamp %lockEndTime) (pair (nat %lockFactor) (set %whitelist address)))))))
                (pair (big_map %ledger address (pair (nat %amount) (nat %amountLocked)))
                      (address %admin)))) ;
  code { PUSH nat 1000000 ;
         DUP ;
         PUSH nat 6666 ;
         MUL ;
         SWAP ;
         DUP ;
         DUG 2 ;
         PUSH nat 1600000 ;
         MUL ;
         NIL operation ;
         LAMBDA
           (pair address
                 (pair (big_map string bytes)
                       (pair (pair (pair address nat)
                                   (pair mutez (pair nat (pair nat (pair timestamp (pair nat (set address)))))))
                             (pair (big_map address (pair nat nat)) address))))
           (pair nat nat)
           { UNPAIR ;
             SWAP ;
             GET 5 ;
             SWAP ;
             GET ;
             IF_NONE { PUSH nat 0 ; PUSH nat 0 ; SWAP ; PAIR } {} } ;
         DIG 5 ;
         UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { DIG 2 ;
                     DIG 4 ;
                     DIG 5 ;
                     DIG 6 ;
                     DROP 4 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 6 ;
                     SENDER ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUP ;
                     DUG 3 ;
                     GET 3 ;
                     DIG 3 ;
                     GET 3 ;
                     GET 12 ;
                     DIG 3 ;
                     PUSH bool True ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 12 ;
                     UPDATE 3 ;
                     SWAP ;
                     PAIR }
                   { DIG 3 ;
                     DROP 2 ;
                     PUSH mutez 0 ;
                     AMOUNT ;
                     COMPARE ;
                     LE ;
                     IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                     DUP ;
                     GET 3 ;
                     GET 7 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     GET 5 ;
                     COMPARE ;
                     GE ;
                     IF { PUSH string "SOLD_OUT" ; FAILWITH } {} ;
                     PUSH bool False ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     GET 12 ;
                     SENDER ;
                     MEM ;
                     COMPARE ;
                     EQ ;
                     IF { PUSH string "INVALID_BUYER" ; FAILWITH } {} ;
                     PUSH nat 1000000 ;
                     DUP 6 ;
                     DUP 3 ;
                     GET 3 ;
                     GET 3 ;
                     PUSH nat 1000000 ;
                     AMOUNT ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     GET 7 ;
                     DUP 3 ;
                     GET 3 ;
                     GET 5 ;
                     DUP 3 ;
                     ADD ;
                     COMPARE ;
                     GT ;
                     IF { DROP ;
                          DUP ;
                          GET 3 ;
                          GET 5 ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          GET 3 ;
                          GET 7 ;
                          SUB ;
                          ABS ;
                          PUSH nat 1000000 ;
                          DUP 3 ;
                          GET 3 ;
                          GET 3 ;
                          DIG 7 ;
                          PUSH nat 1000000 ;
                          DUP 5 ;
                          MUL ;
                          EDIV ;
                          IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                          CAR ;
                          MUL ;
                          EDIV ;
                          IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                          CAR ;
                          AMOUNT ;
                          SUB ;
                          PAIR }
                        { DIG 5 ; DROP ; PUSH mutez 0 ; PAIR } ;
                     DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     DUP 3 ;
                     SENDER ;
                     PAIR ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     DIG 5 ;
                     DUP 3 ;
                     DUP 3 ;
                     CAR ;
                     ADD ;
                     COMPARE ;
                     LT ;
                     IF { PUSH string "MIN_AMOUNT_NOT_MET" ; FAILWITH } {} ;
                     DIG 4 ;
                     DUP 3 ;
                     DUP 3 ;
                     CAR ;
                     ADD ;
                     COMPARE ;
                     GT ;
                     IF { PUSH string "MAX_AMOUNT_EXCEEDED" ; FAILWITH } {} ;
                     DUP ;
                     DUP 3 ;
                     DIG 2 ;
                     CAR ;
                     ADD ;
                     UPDATE 1 ;
                     DUP ;
                     PUSH nat 100 ;
                     DUP 6 ;
                     GET 3 ;
                     GET 11 ;
                     DUP 5 ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     DIG 2 ;
                     CDR ;
                     ADD ;
                     UPDATE 2 ;
                     DIG 3 ;
                     DUP ;
                     DUP ;
                     DUG 5 ;
                     GET 3 ;
                     DIG 3 ;
                     DIG 5 ;
                     GET 3 ;
                     GET 5 ;
                     ADD ;
                     UPDATE 5 ;
                     UPDATE 3 ;
                     DUP ;
                     GET 5 ;
                     DIG 2 ;
                     SOME ;
                     SENDER ;
                     UPDATE ;
                     UPDATE 5 ;
                     NIL operation ;
                     PUSH mutez 0 ;
                     DUP 4 ;
                     COMPARE ;
                     GT ;
                     IF { DIG 2 ;
                          SENDER ;
                          CONTRACT unit ;
                          IF_NONE { PUSH string "INVALID_DESTINATION" ; FAILWITH } {} ;
                          SWAP ;
                          UNIT ;
                          TRANSFER_TOKENS ;
                          CONS }
                        { DIG 2 ; DROP } ;
                     PAIR } }
               { DIG 4 ;
                 DIG 5 ;
                 DIG 6 ;
                 DROP 3 ;
                 IF_LEFT
                   { DIG 3 ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 6 ;
                     SENDER ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                     NIL (pair address (pair nat nat)) ;
                     DIG 2 ;
                     PAIR ;
                     SWAP ;
                     ITER { SWAP ;
                            PAIR ;
                            DUP ;
                            CAR ;
                            CDR ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            CAR ;
                            CAR ;
                            DIG 2 ;
                            CDR ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            PAIR ;
                            DUP 5 ;
                            SWAP ;
                            EXEC ;
                            PUSH nat 0 ;
                            SWAP ;
                            CAR ;
                            COMPARE ;
                            GT ;
                            IF { SWAP ;
                                 DUP ;
                                 DUG 2 ;
                                 SWAP ;
                                 DUP ;
                                 DUG 2 ;
                                 PAIR ;
                                 DUP 5 ;
                                 SWAP ;
                                 EXEC ;
                                 DUP ;
                                 DUP ;
                                 DUG 2 ;
                                 CAR ;
                                 PAIR ;
                                 DUP 4 ;
                                 GET 3 ;
                                 GET 9 ;
                                 NOW ;
                                 COMPARE ;
                                 LT ;
                                 IF { SWAP ;
                                      DUP ;
                                      DUG 2 ;
                                      CDR ;
                                      DIG 2 ;
                                      CAR ;
                                      SUB ;
                                      ABS ;
                                      SWAP ;
                                      CDR ;
                                      SWAP ;
                                      PAIR }
                                    { SWAP ; PUSH nat 0 ; UPDATE 2 ; SWAP ; CAR ; PAIR } ;
                                 DUP ;
                                 CAR ;
                                 SWAP ;
                                 CDR ;
                                 DUP ;
                                 DUP 3 ;
                                 DIG 2 ;
                                 CAR ;
                                 SUB ;
                                 ABS ;
                                 UPDATE 1 ;
                                 DIG 4 ;
                                 DUP 4 ;
                                 DUP 6 ;
                                 GET 3 ;
                                 CAR ;
                                 CDR ;
                                 DIG 4 ;
                                 SWAP ;
                                 PAIR ;
                                 SWAP ;
                                 PAIR ;
                                 CONS ;
                                 DIG 3 ;
                                 DUP ;
                                 GET 5 ;
                                 DIG 3 ;
                                 DIG 4 ;
                                 SWAP ;
                                 SOME ;
                                 SWAP ;
                                 UPDATE ;
                                 UPDATE 5 ;
                                 PAIR }
                               { DROP ; PAIR } } ;
                     SWAP ;
                     DROP ;
                     DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     CAR ;
                     SELF_ADDRESS ;
                     SWAP ;
                     CAR ;
                     CONTRACT %transfer
                       (list (pair (address %from_)
                                   (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                     IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
                     PUSH mutez 0 ;
                     NIL (pair address (list (pair address (pair nat nat)))) ;
                     DIG 3 ;
                     DIG 4 ;
                     SWAP ;
                     PAIR ;
                     CONS ;
                     TRANSFER_TOKENS ;
                     SWAP ;
                     NIL operation ;
                     DIG 2 ;
                     CONS ;
                     PAIR }
                   { DIG 2 ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 6 ;
                     SENDER ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUP ;
                     DUG 3 ;
                     GET 3 ;
                     DIG 3 ;
                     GET 3 ;
                     GET 12 ;
                     DIG 3 ;
                     PUSH bool False ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 12 ;
                     UPDATE 3 ;
                     SWAP ;
                     PAIR } } }
           { DIG 2 ;
             DIG 4 ;
             DIG 5 ;
             DIG 6 ;
             DROP 4 ;
             IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 6 ;
                 SENDER ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 GET 3 ;
                 DIG 2 ;
                 UPDATE 9 ;
                 UPDATE 3 ;
                 SWAP ;
                 PAIR }
               { DIG 2 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 6 ;
                 SENDER ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                 CONTRACT unit ;
                 IF_NONE { PUSH string "INVALID_DESTINATION" ; FAILWITH } {} ;
                 BALANCE ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 SWAP ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR } } } }
