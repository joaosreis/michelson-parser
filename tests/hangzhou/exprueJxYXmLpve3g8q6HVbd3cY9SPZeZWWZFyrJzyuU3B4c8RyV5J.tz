{ parameter
    (or (or (or (or (pair %addToLock (pair nat nat) nat) (address %addToWhitelist))
                (or (pair %lock
                       (pair %lock
                          (pair %token
                             (address %address)
                             (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                          (pair (nat %amount) (timestamp %lockEndTime)))
                       (nat %serviceFeeId))
                    (pair %migrateLocks (set nat) address)))
            (or (or (pair %migrateVaults (set address) address)
                    (pair %relock (pair nat timestamp) nat))
                (or (address %removeFromWhitelist) (pair %splitLock nat nat))))
        (or (or (or (pair %transferOwnership nat address) (address %updateAdmin))
                (or (address %updateServiceFeeRecipient)
                    (map %updateServiceFees
                       nat
                       (pair (pair %flat
                                nat
                                (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2)))))
                             (nat %pct)))))
            (or (nat %withdraw) (nat %withdrawProfit)))) ;
  storage
    (pair (big_map %metadata string bytes)
          (pair (big_map %locks
                   nat
                   (pair (pair %token
                            (address %address)
                            (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                         (pair (nat %amountLocked)
                               (pair (nat %initialAmount)
                                     (pair (timestamp %lockStartTime)
                                           (pair (timestamp %lockEndTime) (pair (address %owner) (bool %migrated))))))))
                (pair (nat %nextLockId)
                      (pair (big_map %vaults address address)
                            (pair (address %admin)
                                  (pair (map %serviceFees
                                           nat
                                           (pair (pair %flat
                                                    nat
                                                    (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2)))))
                                                 (nat %pct)))
                                        (pair (address %serviceFeeRecipient) (set %serviceFeeWhitelist address)))))))) ;
  code { LAMBDA
           address
           unit
           { PUSH bool False ;
             SWAP ;
             SENDER ;
             COMPARE ;
             EQ ;
             COMPARE ;
             EQ ;
             IF { PUSH string "INVALID_ACCESS" ; FAILWITH } { PUSH unit Unit } } ;
         LAMBDA
           (pair (pair address address) (pair (pair address (pair nat (or unit unit))) nat))
           operation
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             DUP ;
             GET 4 ;
             IF_LEFT
               { DROP ;
                 CAR ;
                 CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))) ;
                 IF_NONE { PUSH string "CANNOT_INVOKE_FA1_TRANSFER" ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 DIG 3 ;
                 DIG 4 ;
                 DIG 4 ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 TRANSFER_TOKENS }
               { DROP ;
                 DUP ;
                 CAR ;
                 CONTRACT %transfer
                   (list (pair (address %from_)
                               (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                 IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 NIL (pair address (list (pair address (pair nat nat)))) ;
                 DIG 5 ;
                 NIL (pair address (pair nat nat)) ;
                 DIG 7 ;
                 DIG 6 ;
                 GET 3 ;
                 DIG 7 ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 CONS ;
                 SWAP ;
                 PAIR ;
                 CONS ;
                 TRANSFER_TOKENS } } ;
         NIL operation ;
         LAMBDA
           (pair address
                 (pair (big_map string bytes)
                       (pair (big_map
                                nat
                                (pair (pair address (pair nat (or unit unit)))
                                      (pair nat (pair nat (pair timestamp (pair timestamp (pair address bool)))))))
                             (pair nat
                                   (pair (big_map address address)
                                         (pair address
                                               (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                     (pair address (set address)))))))))
           (option address)
           { UNPAIR ; SWAP ; GET 7 ; SWAP ; GET } ;
         DUP ;
         LAMBDA
           (pair (lambda
                    (pair address
                          (pair (big_map string bytes)
                                (pair (big_map
                                         nat
                                         (pair (pair address (pair nat (or unit unit)))
                                               (pair nat (pair nat (pair timestamp (pair timestamp (pair address bool)))))))
                                      (pair nat
                                            (pair (big_map address address)
                                                  (pair address
                                                        (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                              (pair address (set address)))))))))
                    (option address))
                 (pair address
                       (pair (big_map string bytes)
                             (pair (big_map
                                      nat
                                      (pair (pair address (pair nat (or unit unit)))
                                            (pair nat (pair nat (pair timestamp (pair timestamp (pair address bool)))))))
                                   (pair nat
                                         (pair (big_map address address)
                                               (pair address
                                                     (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                           (pair address (set address))))))))))
           address
           { UNPAIR ;
             SWAP ;
             EXEC ;
             IF_NONE { PUSH string "NO_VAULT_FOUND" ; FAILWITH } {} } ;
         SWAP ;
         APPLY ;
         SWAP ;
         LAMBDA
           (pair (lambda
                    (pair address
                          (pair (big_map string bytes)
                                (pair (big_map
                                         nat
                                         (pair (pair address (pair nat (or unit unit)))
                                               (pair nat (pair nat (pair timestamp (pair timestamp (pair address bool)))))))
                                      (pair nat
                                            (pair (big_map address address)
                                                  (pair address
                                                        (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                              (pair address (set address)))))))))
                    (option address))
                 (pair (pair address (list operation))
                       (pair (big_map string bytes)
                             (pair (big_map
                                      nat
                                      (pair (pair address (pair nat (or unit unit)))
                                            (pair nat (pair nat (pair timestamp (pair timestamp (pair address bool)))))))
                                   (pair nat
                                         (pair (big_map address address)
                                               (pair address
                                                     (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                           (pair address (set address))))))))))
           (pair (list operation) address)
           { UNPAIR ;
             SWAP ;
             UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             SWAP ;
             PAIR ;
             DIG 2 ;
             SWAP ;
             EXEC ;
             IF_NONE
               { SELF_ADDRESS ;
                 PUSH mutez 0 ;
                 NONE key_hash ;
                 CREATE_CONTRACT
                   { parameter
                       (or (or (address %migrate)
                               (pair %withdrawal
                                  (pair (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                                        address)
                                  nat))
                           (pair %withdrawalProfit
                              (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                              address)) ;
                     storage address ;
                     code { UNPAIR ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            SENDER ;
                            COMPARE ;
                            NEQ ;
                            IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                            IF_LEFT
                              { IF_LEFT
                                  { SWAP ; DROP ; NIL operation ; PAIR }
                                  { NIL operation ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    CAR ;
                                    CAR ;
                                    GET 4 ;
                                    IF_LEFT
                                      { DROP ;
                                        SWAP ;
                                        DUP ;
                                        DUG 2 ;
                                        CAR ;
                                        CAR ;
                                        CAR ;
                                        CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))) ;
                                        IF_NONE { PUSH string "CANNOT_INVOKE_FA1_TRANSFER" ; FAILWITH } {} ;
                                        SELF_ADDRESS ;
                                        DUP 4 ;
                                        CAR ;
                                        CDR ;
                                        DIG 4 ;
                                        CDR ;
                                        SWAP ;
                                        PAIR ;
                                        SWAP ;
                                        PAIR ;
                                        DUG 2 ;
                                        PUSH mutez 0 ;
                                        DIG 3 ;
                                        TRANSFER_TOKENS ;
                                        CONS }
                                      { DROP ;
                                        SWAP ;
                                        DUP ;
                                        DUG 2 ;
                                        CAR ;
                                        CAR ;
                                        CAR ;
                                        CONTRACT %transfer
                                          (list (pair (address %from_)
                                                      (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                                        IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
                                        SELF_ADDRESS ;
                                        NIL (pair address (pair nat nat)) ;
                                        DUP 5 ;
                                        CAR ;
                                        CDR ;
                                        DUP 6 ;
                                        CAR ;
                                        CAR ;
                                        GET 3 ;
                                        DIG 6 ;
                                        CDR ;
                                        SWAP ;
                                        PAIR ;
                                        SWAP ;
                                        PAIR ;
                                        CONS ;
                                        SWAP ;
                                        PAIR ;
                                        DUG 2 ;
                                        PUSH mutez 0 ;
                                        NIL (pair address (list (pair address (pair nat nat)))) ;
                                        DIG 4 ;
                                        CONS ;
                                        TRANSFER_TOKENS ;
                                        CONS } ;
                                    PAIR } }
                              { DUP ;
                                CAR ;
                                CAR ;
                                CONTRACT %withdrawProfit address ;
                                IF_NONE
                                  { DROP ; NIL operation ; PAIR }
                                  { DIG 2 ;
                                    NIL operation ;
                                    DIG 2 ;
                                    PUSH mutez 0 ;
                                    DIG 4 ;
                                    CDR ;
                                    TRANSFER_TOKENS ;
                                    CONS ;
                                    PAIR } } } } ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 DUG 2 ;
                 CAR ;
                 CONS ;
                 PAIR }
               { SWAP ; PAIR } } ;
         SWAP ;
         APPLY ;
         LAMBDA
           (pair nat
                 (pair (big_map string bytes)
                       (pair (big_map
                                nat
                                (pair (pair address (pair nat (or unit unit)))
                                      (pair nat (pair nat (pair timestamp (pair timestamp (pair address bool)))))))
                             (pair nat
                                   (pair (big_map address address)
                                         (pair address
                                               (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                     (pair address (set address)))))))))
           (pair (pair address (pair nat (or unit unit)))
                 (pair nat (pair nat (pair timestamp (pair timestamp (pair address bool))))))
           { UNPAIR ;
             SWAP ;
             GET 3 ;
             SWAP ;
             GET ;
             IF_NONE { PUSH string "INVALID_LOCK" ; FAILWITH } {} } ;
         LAMBDA
           (pair (pair (pair address (pair nat (or unit unit)))
                       (pair nat (pair nat (pair timestamp (pair timestamp (pair address bool))))))
                 address)
           unit
           { UNPAIR ;
             PUSH bool False ;
             DUG 2 ;
             GET 11 ;
             COMPARE ;
             EQ ;
             COMPARE ;
             EQ ;
             IF { PUSH string "INVALID_ACCESS" ; FAILWITH } { PUSH unit Unit } } ;
         DUP 6 ;
         DUP 5 ;
         PAIR ;
         LAMBDA
           (pair (pair (lambda
                          (pair address
                                (pair (big_map string bytes)
                                      (pair (big_map
                                               nat
                                               (pair (pair address (pair nat (or unit unit)))
                                                     (pair nat (pair nat (pair timestamp (pair timestamp (pair address bool)))))))
                                            (pair nat
                                                  (pair (big_map address address)
                                                        (pair address
                                                              (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                                    (pair address (set address)))))))))
                          address)
                       (lambda
                          (pair (pair address address) (pair (pair address (pair nat (or unit unit))) nat))
                          operation))
                 (pair (pair (pair (pair address (pair nat (or unit unit))) (pair nat (pair nat bool)))
                             (list operation))
                       (pair (big_map string bytes)
                             (pair (big_map
                                      nat
                                      (pair (pair address (pair nat (or unit unit)))
                                            (pair nat (pair nat (pair timestamp (pair timestamp (pair address bool)))))))
                                   (pair nat
                                         (pair (big_map address address)
                                               (pair address
                                                     (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                           (pair address (set address))))))))))
           (pair (list operation) nat)
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             UNPAIR ;
             PUSH nat 0 ;
             PUSH bool False ;
             DUP 5 ;
             GET 14 ;
             SENDER ;
             MEM ;
             COMPARE ;
             EQ ;
             IF { DUP 4 ;
                  DUP 3 ;
                  GET 5 ;
                  SWAP ;
                  GET 11 ;
                  SWAP ;
                  GET ;
                  IF_NONE { PUSH string "INVALID_SERVICE_FEE" ; FAILWITH } {} ;
                  PUSH nat 0 ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  CAR ;
                  CAR ;
                  COMPARE ;
                  GT ;
                  IF { DUP ;
                       CAR ;
                       CAR ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       CAR ;
                       CDR ;
                       PAIR ;
                       DUP 6 ;
                       GET 13 ;
                       SENDER ;
                       PAIR ;
                       PAIR ;
                       DUP 8 ;
                       SWAP ;
                       EXEC ;
                       DIG 4 ;
                       SWAP ;
                       CONS }
                     { DIG 3 } ;
                  PUSH nat 0 ;
                  DUP 3 ;
                  CDR ;
                  COMPARE ;
                  GT ;
                  IF { DIG 2 ;
                       DROP ;
                       PUSH nat 10000 ;
                       DIG 2 ;
                       CDR ;
                       DUP 4 ;
                       GET 3 ;
                       MUL ;
                       EDIV ;
                       IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                       CAR ;
                       PUSH bool True ;
                       DUP 4 ;
                       GET 6 ;
                       COMPARE ;
                       EQ ;
                       IF { DIG 5 ;
                            DROP ;
                            DUP 4 ;
                            SENDER ;
                            PAIR ;
                            DIG 5 ;
                            SWAP ;
                            EXEC ;
                            CONTRACT %withdrawal
                              (pair (pair (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                                          address)
                                    nat) ;
                            IF_NONE { PUSH string "CANNOT_INVOKE_VAULT_WITHDRAWAL" ; FAILWITH } {} ;
                            PUSH mutez 0 ;
                            DUP 3 ;
                            DIG 6 ;
                            GET 13 ;
                            DIG 6 ;
                            CAR ;
                            PAIR ;
                            PAIR ;
                            TRANSFER_TOKENS ;
                            DIG 2 ;
                            SWAP ;
                            CONS }
                          { DIG 4 ;
                            DROP ;
                            DUP ;
                            DIG 3 ;
                            CAR ;
                            PAIR ;
                            DIG 3 ;
                            GET 13 ;
                            SENDER ;
                            PAIR ;
                            PAIR ;
                            DIG 3 ;
                            SWAP ;
                            EXEC ;
                            DIG 2 ;
                            SWAP ;
                            CONS } ;
                       SWAP ;
                       PAIR }
                     { SWAP ; DIG 3 ; DIG 4 ; DIG 5 ; DIG 6 ; DROP 5 ; SWAP ; PAIR } }
                { SWAP ; DIG 3 ; DIG 4 ; DIG 5 ; DROP 4 ; PAIR } ;
             DUP ;
             CAR ;
             SWAP ;
             CDR ;
             PAIR } ;
         SWAP ;
         APPLY ;
         DIG 8 ;
         UNPAIR ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         GT ;
         IF { PUSH string "INVALID_AMOUNT_TEZ_REFUSED" ; FAILWITH } {} ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { DIG 5 ;
                     DROP ;
                     IF_LEFT
                       { DIG 6 ;
                         DIG 8 ;
                         DROP 2 ;
                         DUP ;
                         CAR ;
                         CAR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         CDR ;
                         DUP 4 ;
                         DUP 3 ;
                         PAIR ;
                         DIG 7 ;
                         SWAP ;
                         EXEC ;
                         SENDER ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         PAIR ;
                         DIG 7 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         PUSH nat 0 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 3 ;
                         COMPARE ;
                         LE ;
                         IF { PUSH string "LOCK_DRAINED" ; FAILWITH } {} ;
                         PUSH nat 0 ;
                         DUP 3 ;
                         COMPARE ;
                         LE ;
                         IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                         DUP 5 ;
                         NIL operation ;
                         DUP 3 ;
                         CAR ;
                         DUP 5 ;
                         DIG 7 ;
                         CDR ;
                         PUSH bool False ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         PAIR ;
                         DIG 5 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         CDR ;
                         PUSH nat 0 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         COMPARE ;
                         GT ;
                         IF { DIG 3 ;
                              SUB ;
                              ABS ;
                              DUP 3 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              DIG 4 ;
                              GET 3 ;
                              ADD ;
                              UPDATE 3 ;
                              PAIR }
                            { DIG 3 ; DROP 2 ; PUSH nat 0 ; DIG 2 ; PAIR } ;
                         DUP ;
                         CAR ;
                         DUP 5 ;
                         SENDER ;
                         PAIR ;
                         DIG 6 ;
                         SWAP ;
                         EXEC ;
                         DIG 2 ;
                         CDR ;
                         DUP 3 ;
                         CAR ;
                         PAIR ;
                         SWAP ;
                         SENDER ;
                         PAIR ;
                         PAIR ;
                         DIG 5 ;
                         SWAP ;
                         EXEC ;
                         DIG 4 ;
                         DUP ;
                         GET 3 ;
                         DIG 3 ;
                         DIG 5 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         DIG 2 ;
                         CAR ;
                         DIG 2 ;
                         CONS ;
                         PAIR }
                       { DIG 2 ;
                         DIG 3 ;
                         DIG 4 ;
                         DIG 5 ;
                         DIG 7 ;
                         DROP 5 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 9 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         GET 14 ;
                         DIG 2 ;
                         PUSH bool True ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 14 ;
                         SWAP ;
                         PAIR } }
                   { DIG 3 ;
                     DIG 6 ;
                     DIG 7 ;
                     DROP 3 ;
                     IF_LEFT
                       { DIG 3 ;
                         DIG 6 ;
                         DROP 2 ;
                         NOW ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         GET 4 ;
                         COMPARE ;
                         LT ;
                         IF { PUSH string "INVALID_LOCK_END_TIME" ; FAILWITH } {} ;
                         PUSH nat 0 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         GET 3 ;
                         COMPARE ;
                         LE ;
                         IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                         DUP ;
                         CAR ;
                         CAR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         GET 3 ;
                         DUP 3 ;
                         CAR ;
                         GET 3 ;
                         NOW ;
                         DUP 5 ;
                         CAR ;
                         GET 4 ;
                         SENDER ;
                         PUSH bool False ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         DUP 3 ;
                         NIL operation ;
                         DUP 3 ;
                         CAR ;
                         DUP 4 ;
                         GET 3 ;
                         DIG 5 ;
                         CDR ;
                         PUSH bool False ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         PAIR ;
                         DIG 3 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         CDR ;
                         PUSH nat 0 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         COMPARE ;
                         GT ;
                         IF { DUP 3 ;
                              GET 3 ;
                              SUB ;
                              ABS ;
                              DIG 2 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              UPDATE 3 ;
                              SWAP ;
                              UPDATE 5 }
                            { DROP ; SWAP } ;
                         DUP 3 ;
                         DIG 2 ;
                         CAR ;
                         SENDER ;
                         PAIR ;
                         PAIR ;
                         DIG 3 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         CDR ;
                         DUP 3 ;
                         GET 3 ;
                         DUP 4 ;
                         CAR ;
                         PAIR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         SENDER ;
                         PAIR ;
                         PAIR ;
                         DIG 5 ;
                         SWAP ;
                         EXEC ;
                         DIG 4 ;
                         DUP ;
                         DUP ;
                         DUG 6 ;
                         GET 3 ;
                         DIG 5 ;
                         DIG 6 ;
                         GET 5 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         DUP ;
                         PUSH nat 1 ;
                         DIG 2 ;
                         GET 5 ;
                         ADD ;
                         UPDATE 5 ;
                         DUP ;
                         GET 7 ;
                         DIG 3 ;
                         SOME ;
                         SENDER ;
                         UPDATE ;
                         UPDATE 7 ;
                         DIG 2 ;
                         CAR ;
                         DIG 2 ;
                         CONS ;
                         PAIR }
                       { DIG 2 ;
                         DIG 4 ;
                         DIG 5 ;
                         DROP 3 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 9 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         SWAP ;
                         NIL operation ;
                         PAIR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         ITER { SWAP ;
                                PAIR ;
                                DUP ;
                                CAR ;
                                CDR ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                CAR ;
                                CAR ;
                                DIG 2 ;
                                CDR ;
                                DUP 3 ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                PAIR ;
                                DUP 6 ;
                                SWAP ;
                                EXEC ;
                                PUSH bool False ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                GET 12 ;
                                COMPARE ;
                                EQ ;
                                IF { DUP 5 ;
                                     CDR ;
                                     CONTRACT %migrateFromV1
                                       (pair (pair %token
                                                (address %address)
                                                (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                                             (pair (nat %amountLocked)
                                                   (pair (nat %initialAmount)
                                                         (pair (timestamp %lockStartTime)
                                                               (pair (timestamp %lockEndTime) (pair (address %owner) (bool %migrated))))))) ;
                                     IF_NONE { PUSH string "CANNOT_MIGRATE_LOCKS" ; FAILWITH } {} ;
                                     PUSH mutez 0 ;
                                     DUP 3 ;
                                     TRANSFER_TOKENS ;
                                     DIG 3 ;
                                     SWAP ;
                                     CONS }
                                   { DIG 2 } ;
                                DIG 3 ;
                                DUP ;
                                GET 3 ;
                                DIG 3 ;
                                PUSH bool True ;
                                UPDATE 12 ;
                                DIG 4 ;
                                SWAP ;
                                SOME ;
                                SWAP ;
                                UPDATE ;
                                UPDATE 3 ;
                                SWAP ;
                                PAIR } ;
                         SWAP ;
                         DIG 2 ;
                         DROP 2 } } }
               { DIG 5 ;
                 DIG 8 ;
                 DROP 2 ;
                 IF_LEFT
                   { DIG 6 ;
                     DROP ;
                     IF_LEFT
                       { DIG 2 ;
                         DIG 3 ;
                         DIG 4 ;
                         DROP 3 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 9 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         NIL operation ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         ITER { SWAP ;
                                PAIR ;
                                DUP 3 ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                CDR ;
                                PAIR ;
                                DUP 5 ;
                                SWAP ;
                                EXEC ;
                                CONTRACT %migrate address ;
                                IF_NONE { PUSH string "CANNOT_MIGRATE_VAULT" ; FAILWITH } {} ;
                                PUSH mutez 0 ;
                                DUP 4 ;
                                CDR ;
                                TRANSFER_TOKENS ;
                                SWAP ;
                                CAR ;
                                SWAP ;
                                CONS } ;
                         SWAP ;
                         DIG 3 ;
                         DROP 2 ;
                         PAIR }
                       { DIG 5 ;
                         DIG 6 ;
                         DROP 2 ;
                         DUP ;
                         CAR ;
                         CAR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         CDR ;
                         DUP 4 ;
                         DUP 3 ;
                         PAIR ;
                         DIG 7 ;
                         SWAP ;
                         EXEC ;
                         SENDER ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         PAIR ;
                         DIG 7 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         DUP ;
                         GET 9 ;
                         DUP 3 ;
                         COMPARE ;
                         LT ;
                         IF { PUSH string "INVALID_LOCK_END_TIME" ; FAILWITH } {} ;
                         SWAP ;
                         UPDATE 9 ;
                         DUP 4 ;
                         NIL operation ;
                         DUP 3 ;
                         CAR ;
                         DUP 4 ;
                         GET 3 ;
                         DIG 6 ;
                         CDR ;
                         PUSH bool True ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         PAIR ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         CDR ;
                         PUSH nat 0 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         COMPARE ;
                         GT ;
                         IF { DUP 3 ; SWAP ; DIG 3 ; GET 3 ; SUB ; ABS ; UPDATE 3 }
                            { DROP ; SWAP } ;
                         DIG 3 ;
                         DUP ;
                         GET 3 ;
                         DIG 2 ;
                         DIG 4 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         SWAP ;
                         CAR ;
                         PAIR } }
                   { DIG 2 ;
                     DIG 5 ;
                     DROP 2 ;
                     IF_LEFT
                       { DIG 2 ;
                         DIG 3 ;
                         DROP 2 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 9 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         GET 14 ;
                         DIG 2 ;
                         PUSH bool False ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 14 ;
                         SWAP ;
                         PAIR }
                       { DIG 5 ;
                         DROP ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP 3 ;
                         DUP 3 ;
                         PAIR ;
                         DIG 5 ;
                         SWAP ;
                         EXEC ;
                         SENDER ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         PAIR ;
                         DIG 5 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         PUSH nat 0 ;
                         DUP 3 ;
                         COMPARE ;
                         LE ;
                         IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                         DUP ;
                         GET 3 ;
                         DUP 3 ;
                         COMPARE ;
                         GE ;
                         IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                         DUP ;
                         DUP 3 ;
                         DIG 2 ;
                         GET 3 ;
                         SUB ;
                         ABS ;
                         UPDATE 3 ;
                         DUP ;
                         CAR ;
                         DUG 2 ;
                         DUP ;
                         DUG 3 ;
                         GET 5 ;
                         DUP 4 ;
                         GET 7 ;
                         DUP 5 ;
                         GET 9 ;
                         SENDER ;
                         PUSH bool False ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         DIG 3 ;
                         DUP ;
                         GET 3 ;
                         DIG 3 ;
                         DIG 4 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         DUP ;
                         DUP ;
                         DUG 2 ;
                         GET 3 ;
                         DIG 3 ;
                         DIG 3 ;
                         GET 5 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         DUP ;
                         PUSH nat 1 ;
                         DIG 2 ;
                         GET 5 ;
                         ADD ;
                         UPDATE 5 ;
                         SWAP ;
                         PAIR } } } }
           { DIG 2 ;
             DIG 8 ;
             DROP 2 ;
             IF_LEFT
               { IF_LEFT
                   { IF_LEFT
                       { DIG 6 ;
                         DIG 7 ;
                         DROP 2 ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP 3 ;
                         DUP 3 ;
                         PAIR ;
                         DIG 5 ;
                         SWAP ;
                         EXEC ;
                         SENDER ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         PAIR ;
                         DIG 5 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 11 ;
                         COMPARE ;
                         EQ ;
                         IF { PUSH string "INVALID_OWNERSHIP_TRANSFER" ; FAILWITH } {} ;
                         DUP 4 ;
                         SENDER ;
                         PAIR ;
                         DIG 6 ;
                         SWAP ;
                         EXEC ;
                         DUP 5 ;
                         NIL operation ;
                         DUP 5 ;
                         PAIR ;
                         PAIR ;
                         DIG 6 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         CDR ;
                         DIG 2 ;
                         CONTRACT %withdrawal
                           (pair (pair (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                                       address)
                                 nat) ;
                         IF_NONE { PUSH string "CANNOT_INVOKE_VAULT_WITHDRAWAL" ; FAILWITH } {} ;
                         PUSH mutez 0 ;
                         DUP 5 ;
                         GET 3 ;
                         DUP 4 ;
                         DUP 7 ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         TRANSFER_TOKENS ;
                         DIG 6 ;
                         DUP ;
                         GET 3 ;
                         DIG 5 ;
                         DUP 7 ;
                         UPDATE 11 ;
                         DIG 7 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         DUP ;
                         GET 7 ;
                         DIG 3 ;
                         DIG 5 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 7 ;
                         DIG 2 ;
                         CAR ;
                         DIG 2 ;
                         CONS ;
                         PAIR }
                       { DIG 2 ;
                         DIG 3 ;
                         DIG 4 ;
                         DIG 5 ;
                         DROP 4 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 9 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         UPDATE 9 ;
                         SWAP ;
                         PAIR } }
                   { DIG 2 ;
                     DIG 3 ;
                     DIG 4 ;
                     DIG 5 ;
                     DROP 4 ;
                     IF_LEFT
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 9 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         UPDATE 13 ;
                         SWAP ;
                         PAIR }
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 9 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         UPDATE 11 ;
                         SWAP ;
                         PAIR } } }
               { DIG 4 ;
                 DIG 6 ;
                 DIG 7 ;
                 DROP 3 ;
                 IF_LEFT
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     SENDER ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     PUSH nat 0 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     COMPARE ;
                     LE ;
                     IF { PUSH string "LOCK_DRAINED" ; FAILWITH } {} ;
                     NOW ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 9 ;
                     COMPARE ;
                     GT ;
                     IF { PUSH string "NOT_TIME_TO_WITHDRAW" ; FAILWITH } {} ;
                     DUP 3 ;
                     SENDER ;
                     PAIR ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     DUP ;
                     CONTRACT %withdrawal
                       (pair (pair (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                                   address)
                             nat) ;
                     IF_NONE { PUSH string "CANNOT_INVOKE_VAULT_WITHDRAWAL" ; FAILWITH } {} ;
                     PUSH mutez 0 ;
                     DUP 4 ;
                     GET 3 ;
                     SENDER ;
                     DUP 6 ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     TRANSFER_TOKENS ;
                     SWAP ;
                     CONTRACT %withdrawalProfit
                       (pair (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                             address) ;
                     IF_NONE
                       { PUSH string "CANNOT_INVOKE_VAULT_WITHDRAWAL_PROFIT" ; FAILWITH }
                       {} ;
                     PUSH mutez 0 ;
                     SENDER ;
                     DIG 4 ;
                     CAR ;
                     PAIR ;
                     TRANSFER_TOKENS ;
                     DIG 3 ;
                     DUP ;
                     GET 3 ;
                     DIG 4 ;
                     NONE (pair (pair address (pair nat (or unit unit)))
                                (pair nat (pair nat (pair timestamp (pair timestamp (pair address bool)))))) ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 3 ;
                     NIL operation ;
                     DIG 3 ;
                     CONS ;
                     DIG 2 ;
                     CONS ;
                     PAIR }
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     SWAP ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     SENDER ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     PUSH nat 0 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     COMPARE ;
                     LE ;
                     IF { PUSH string "LOCK_DRAINED" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     SENDER ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     CONTRACT %withdrawalProfit
                       (pair (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                             address) ;
                     IF_NONE
                       { PUSH string "CANNOT_INVOKE_VAULT_WITHDRAWAL_PROFIT" ; FAILWITH }
                       {} ;
                     PUSH mutez 0 ;
                     SENDER ;
                     DIG 3 ;
                     CAR ;
                     PAIR ;
                     TRANSFER_TOKENS ;
                     SWAP ;
                     NIL operation ;
                     DIG 2 ;
                     CONS ;
                     PAIR } } } } }
