{ parameter
    (or (pair %balance_of
           (list %requests (pair (address %owner) (nat %token_id)))
           (contract (list (pair (pair (address %owner) (nat %token_id)) (nat %balance)))))
        (or (pair %setSFee int nat)
            (or (pair %mint
                   (nat %itokenid)
                   (pair (address %iowner)
                         (pair (list %iroyalties (pair address (pair int nat))) (map %itokeninfo string bytes))))
                (or (nat %burn)
                    (or (pair %removeOperator (address %a) (pair (nat %b) (address %c)))
                        (or (list %update_operators
                               (or (pair (address %owner) (pair (address %operator) (nat %token_id)))
                                   (pair (address %owner) (pair (address %operator) (nat %token_id)))))
                            (or (list %transfer
                                   (pair address (list (pair (address %to_) (pair (nat %token_id) (nat %amount))))))
                                (or (pair %exchange (nat %tid) (pair (nat %amount) (pair (address %src) (address %dst))))
                                    (or (contract %token_metadata_registry address)
                                        (or (address %transfer_admin) (unit %accept_admin))))))))))) ;
  storage
    (pair (address %token)
          (pair (address %subtrack)
                (pair (address %admin)
                      (pair (address %admin_candidate)
                            (pair (big_map %ledger nat address)
                                  (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
                                        (pair (set %operator (pair address (pair nat address)))
                                              (pair (big_map %token_royalties nat (list (pair address (pair int nat))))
                                                    (pair (pair %sfee int nat) (big_map %metadata string bytes)))))))))) ;
  code { LAMBDA
           (pair (pair (pair int nat) (pair int nat)) (or unit (or (or unit unit) (or unit unit))))
           bool
           { { { DUP ; CAR ; DIP { CDR } } } ;
             { { DUP ; CAR ; DIP { CDR } } } ;
             DIP { { { DUP ; CAR ; DIP { CDR } } } } ;
             { { DUP ; CAR ; DIP { CDR } } } ;
             DUG 3 ;
             MUL ;
             DIP { MUL } ;
             SWAP ;
             COMPARE ;
             SWAP ;
             IF_LEFT
               { DROP ; EQ }
               { IF_LEFT
                   { IF_LEFT { DROP ; LT } { DROP ; LE } }
                   { IF_LEFT { DROP ; GT } { DROP ; GE } } } } ;
         NIL operation ;
         DIG 2 ;
         { { DUP ; CAR ; DIP { CDR } } } ;
         DIP { { { DUP ; CAR ; DIP { CDR } } } ;
               SWAP ;
               { { DUP ; CAR ; DIP { CDR } } } ;
               SWAP ;
               { { DUP ; CAR ; DIP { CDR } } } ;
               SWAP ;
               { { DUP ; CAR ; DIP { CDR } } } ;
               SWAP ;
               { { DUP ; CAR ; DIP { CDR } } } ;
               SWAP ;
               { { DUP ; CAR ; DIP { CDR } } } ;
               SWAP ;
               { { DUP ; CAR ; DIP { CDR } } } ;
               SWAP ;
               { { DUP ; CAR ; DIP { CDR } } } ;
               SWAP ;
               { { DUP ; CAR ; DIP { CDR } } } ;
               SWAP } ;
         IF_LEFT
           { { { DUP ; CAR ; DIP { CDR } } } ;
             DIG 12 ;
             DUP ;
             DUG 13 ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             AMOUNT ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             MAP { DUP ;
                   CAR ;
                   DIG 12 ;
                   DUP ;
                   DUG 13 ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CDR ;
                   GET ;
                   IF_NONE { PUSH string "NotFound" ; FAILWITH } {} ;
                   COMPARE ;
                   EQ ;
                   IF { PUSH nat 1 } { PUSH nat 0 } ;
                   DIG 1 ;
                   DUP ;
                   DUG 2 ;
                   PAIR ;
                   SWAP ;
                   DROP } ;
             TRANSFER_TOKENS ;
             CONS ;
             DIP { DIG 12 ; DROP } ;
             DUG 12 ;
             DROP 2 ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             DIG 1 ;
             PAIR }
           { IF_LEFT
               { DIG 8 ;
                 DUP ;
                 DUG 9 ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 NOT ;
                 IF { PUSH string "InvalidCaller" ; FAILWITH } {} ;
                 DIG 12 ;
                 DUP ;
                 DUG 13 ;
                 UNIT ;
                 RIGHT unit ;
                 LEFT (or unit unit) ;
                 RIGHT unit ;
                 PUSH nat 1 ;
                 PUSH int 1 ;
                 PAIR ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 PAIR ;
                 PAIR ;
                 EXEC ;
                 DIG 13 ;
                 DUP ;
                 DUG 14 ;
                 UNIT ;
                 RIGHT unit ;
                 LEFT (or unit unit) ;
                 RIGHT unit ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 PUSH nat 1 ;
                 PUSH int 0 ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 EXEC ;
                 AND ;
                 NOT ;
                 IF { PUSH string "r0" ; PUSH string "InvalidCondition" ; PAIR ; FAILWITH } {} ;
                 DUP ;
                 DIP { DIG 2 ; DROP } ;
                 DUG 2 ;
                 DROP ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 DIG 1 ;
                 PAIR }
               { IF_LEFT
                   { { { DUP ; CAR ; DIP { CDR } } } ;
                     SWAP ;
                     { { DUP ; CAR ; DIP { CDR } } } ;
                     SWAP ;
                     { { DUP ; CAR ; DIP { CDR } } } ;
                     SWAP ;
                     DIG 11 ;
                     DUP ;
                     DUG 12 ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     NOT ;
                     IF { PUSH string "InvalidCaller" ; FAILWITH } {} ;
                     DIG 9 ;
                     DUP ;
                     DUG 10 ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     MEM ;
                     IF { PUSH string "KeyExists" ; FAILWITH }
                        { DIG 9 ;
                          DUP ;
                          DUG 10 ;
                          DIG 3 ;
                          DUP ;
                          DUG 4 ;
                          SOME ;
                          DIG 5 ;
                          DUP ;
                          DUG 6 ;
                          UPDATE ;
                          DIP { DIG 9 ; DROP } ;
                          DUG 9 } ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     MEM ;
                     IF { PUSH string "KeyExists" ; FAILWITH }
                        { DIG 8 ;
                          DUP ;
                          DUG 9 ;
                          DIG 1 ;
                          DUP ;
                          DUG 2 ;
                          DIG 5 ;
                          DUP ;
                          DUG 6 ;
                          PAIR ;
                          SOME ;
                          DIG 5 ;
                          DUP ;
                          DUG 6 ;
                          UPDATE ;
                          DIP { DIG 8 ; DROP } ;
                          DUG 8 } ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     MEM ;
                     IF { PUSH string "KeyExists" ; FAILWITH }
                        { DIG 6 ;
                          DUP ;
                          DUG 7 ;
                          DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          SOME ;
                          DIG 5 ;
                          DUP ;
                          DUG 6 ;
                          UPDATE ;
                          DIP { DIG 6 ; DROP } ;
                          DUG 6 } ;
                     DROP 4 ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIG 1 ;
                     PAIR }
                   { IF_LEFT
                       { DIG 8 ;
                         DUP ;
                         DUG 9 ;
                         SENDER ;
                         COMPARE ;
                         EQ ;
                         NOT ;
                         IF { PUSH string "InvalidCaller" ; FAILWITH } {} ;
                         DIG 8 ;
                         DUP ;
                         DUG 9 ;
                         DIG 7 ;
                         DUP ;
                         DUG 8 ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         GET ;
                         IF_NONE { PUSH string "NotFound" ; FAILWITH } {} ;
                         COMPARE ;
                         EQ ;
                         NOT ;
                         IF { PUSH string "r1" ; PUSH string "InvalidCondition" ; PAIR ; FAILWITH } {} ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         NONE address ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         UPDATE ;
                         DIP { DIG 6 ; DROP } ;
                         DUG 6 ;
                         DIG 5 ;
                         DUP ;
                         DUG 6 ;
                         NONE (pair nat (map string bytes)) ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         UPDATE ;
                         DIP { DIG 5 ; DROP } ;
                         DUG 5 ;
                         DROP ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         DIG 1 ;
                         PAIR }
                       { IF_LEFT
                           { { { DUP ; CAR ; DIP { CDR } } } ;
                             SWAP ;
                             { { DUP ; CAR ; DIP { CDR } } } ;
                             SWAP ;
                             DIG 10 ;
                             DUP ;
                             DUG 11 ;
                             SENDER ;
                             COMPARE ;
                             EQ ;
                             NOT ;
                             IF { PUSH string "InvalidCaller" ; FAILWITH } {} ;
                             DIG 6 ;
                             DUP ;
                             DUG 7 ;
                             PUSH bool False ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             DIG 4 ;
                             DUP ;
                             DUG 5 ;
                             PAIR ;
                             DIG 5 ;
                             DUP ;
                             DUG 6 ;
                             PAIR ;
                             UPDATE ;
                             DIP { DIG 6 ; DROP } ;
                             DUG 6 ;
                             DROP 3 ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             DIG 1 ;
                             PAIR }
                           { IF_LEFT
                               { DUP ;
                                 ITER { DUP ;
                                        IF_LEFT
                                          { SOURCE ;
                                            DIG 9 ;
                                            DUP ;
                                            DUG 10 ;
                                            DIG 2 ;
                                            DUP ;
                                            DUG 3 ;
                                            CDR ;
                                            CDR ;
                                            GET ;
                                            IF_NONE { PUSH string "NotFound" ; FAILWITH } {} ;
                                            COMPARE ;
                                            EQ ;
                                            NOT ;
                                            IF { PUSH string "CALLER NOT OWNER" ; FAILWITH } {} ;
                                            DIG 6 ;
                                            DUP ;
                                            DUG 7 ;
                                            PUSH bool True ;
                                            DIG 2 ;
                                            DUP ;
                                            DUG 3 ;
                                            CAR ;
                                            DIG 3 ;
                                            DUP ;
                                            DUG 4 ;
                                            CDR ;
                                            CDR ;
                                            PAIR ;
                                            DIG 3 ;
                                            DUP ;
                                            DUG 4 ;
                                            CDR ;
                                            CAR ;
                                            PAIR ;
                                            UPDATE ;
                                            DIP { DIG 6 ; DROP } ;
                                            DUG 6 ;
                                            DROP }
                                          { SOURCE ;
                                            DIG 9 ;
                                            DUP ;
                                            DUG 10 ;
                                            DIG 2 ;
                                            DUP ;
                                            DUG 3 ;
                                            CDR ;
                                            CDR ;
                                            GET ;
                                            IF_NONE { PUSH string "NotFound" ; FAILWITH } {} ;
                                            COMPARE ;
                                            EQ ;
                                            NOT ;
                                            IF { PUSH string "CALLER NOT OWNER" ; FAILWITH } {} ;
                                            DIG 6 ;
                                            DUP ;
                                            DUG 7 ;
                                            PUSH bool False ;
                                            DIG 2 ;
                                            DUP ;
                                            DUG 3 ;
                                            CAR ;
                                            DIG 3 ;
                                            DUP ;
                                            DUG 4 ;
                                            CDR ;
                                            CDR ;
                                            PAIR ;
                                            DIG 3 ;
                                            DUP ;
                                            DUG 4 ;
                                            CDR ;
                                            CAR ;
                                            PAIR ;
                                            UPDATE ;
                                            DIP { DIG 6 ; DROP } ;
                                            DUG 6 ;
                                            DROP } ;
                                        DROP } ;
                                 DROP ;
                                 SWAP ;
                                 PAIR ;
                                 SWAP ;
                                 PAIR ;
                                 SWAP ;
                                 PAIR ;
                                 SWAP ;
                                 PAIR ;
                                 SWAP ;
                                 PAIR ;
                                 SWAP ;
                                 PAIR ;
                                 SWAP ;
                                 PAIR ;
                                 SWAP ;
                                 PAIR ;
                                 SWAP ;
                                 PAIR ;
                                 DIG 1 ;
                                 PAIR }
                               { IF_LEFT
                                   { DUP ;
                                     ITER { DUP ;
                                            CAR ;
                                            DIG 1 ;
                                            DUP ;
                                            DUG 2 ;
                                            CDR ;
                                            DUP ;
                                            ITER { DIG 10 ;
                                                   DUP ;
                                                   DUG 11 ;
                                                   DIG 1 ;
                                                   DUP ;
                                                   DUG 2 ;
                                                   CDR ;
                                                   CAR ;
                                                   MEM ;
                                                   NOT ;
                                                   IF { PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH } {} ;
                                                   DIG 2 ;
                                                   DUP ;
                                                   DUG 3 ;
                                                   SENDER ;
                                                   COMPARE ;
                                                   NEQ ;
                                                   IF { DIG 8 ;
                                                        DUP ;
                                                        DUG 9 ;
                                                        DIG 3 ;
                                                        DUP ;
                                                        DUG 4 ;
                                                        DIG 2 ;
                                                        DUP ;
                                                        DUG 3 ;
                                                        CDR ;
                                                        CAR ;
                                                        PAIR ;
                                                        SENDER ;
                                                        PAIR ;
                                                        MEM ;
                                                        NOT ;
                                                        IF { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } {} }
                                                      {} ;
                                                   DIG 10 ;
                                                   DUP ;
                                                   DUG 11 ;
                                                   DIG 1 ;
                                                   DUP ;
                                                   DUG 2 ;
                                                   CAR ;
                                                   SOME ;
                                                   DIG 2 ;
                                                   DUP ;
                                                   DUG 3 ;
                                                   CDR ;
                                                   CAR ;
                                                   UPDATE ;
                                                   DIP { DIG 10 ; DROP } ;
                                                   DUG 10 ;
                                                   DROP } ;
                                            DROP 3 } ;
                                     DROP ;
                                     SWAP ;
                                     PAIR ;
                                     SWAP ;
                                     PAIR ;
                                     SWAP ;
                                     PAIR ;
                                     SWAP ;
                                     PAIR ;
                                     SWAP ;
                                     PAIR ;
                                     SWAP ;
                                     PAIR ;
                                     SWAP ;
                                     PAIR ;
                                     SWAP ;
                                     PAIR ;
                                     SWAP ;
                                     PAIR ;
                                     DIG 1 ;
                                     PAIR }
                                   { IF_LEFT
                                       { { { DUP ; CAR ; DIP { CDR } } } ;
                                         SWAP ;
                                         { { DUP ; CAR ; DIP { CDR } } } ;
                                         SWAP ;
                                         { { DUP ; CAR ; DIP { CDR } } } ;
                                         SWAP ;
                                         PUSH nat 1 ;
                                         DIG 3 ;
                                         DUP ;
                                         DUG 4 ;
                                         INT ;
                                         PAIR ;
                                         DIG 6 ;
                                         DUP ;
                                         DUG 7 ;
                                         PAIR ;
                                         { { DUP ; CAR ; DIP { CDR } } } ;
                                         DIP { { { DUP ; CAR ; DIP { CDR } } } } ;
                                         { { DUP ; CAR ; DIP { CDR } } } ;
                                         DIP { SWAP } ;
                                         MUL ;
                                         DIP { MUL ;
                                               DUP ;
                                               PUSH nat 0 ;
                                               COMPARE ;
                                               EQ ;
                                               IF { PUSH string "DivByZero" ; FAILWITH } {} } ;
                                         PAIR ;
                                         { { DUP ; CAR ; DIP { CDR } } } ;
                                         EDIV ;
                                         IF_NONE { PUSH string "DivByZero" ; FAILWITH } { CAR } ;
                                         ABS ;
                                         DIG 7 ;
                                         DUP ;
                                         DUG 8 ;
                                         DIG 5 ;
                                         DUP ;
                                         DUG 6 ;
                                         GET ;
                                         IF_NONE { PUSH string "NotFound" ; FAILWITH } {} ;
                                         DIG 1 ;
                                         DUP ;
                                         DUG 2 ;
                                         INT ;
                                         DIG 5 ;
                                         DUP ;
                                         DUG 6 ;
                                         INT ;
                                         SUB ;
                                         ABS ;
                                         DIG 1 ;
                                         DUP ;
                                         DUG 2 ;
                                         ITER { DUP ;
                                                CDR ;
                                                PUSH nat 1 ;
                                                DIG 8 ;
                                                DUP ;
                                                DUG 9 ;
                                                INT ;
                                                PAIR ;
                                                DIG 1 ;
                                                DUP ;
                                                DUG 2 ;
                                                PAIR ;
                                                { { DUP ; CAR ; DIP { CDR } } } ;
                                                DIP { { { DUP ; CAR ; DIP { CDR } } } } ;
                                                { { DUP ; CAR ; DIP { CDR } } } ;
                                                DIP { SWAP } ;
                                                MUL ;
                                                DIP { MUL ;
                                                      DUP ;
                                                      PUSH nat 0 ;
                                                      COMPARE ;
                                                      EQ ;
                                                      IF { PUSH string "DivByZero" ; FAILWITH } {} } ;
                                                PAIR ;
                                                { { DUP ; CAR ; DIP { CDR } } } ;
                                                EDIV ;
                                                IF_NONE { PUSH string "DivByZero" ; FAILWITH } { CAR } ;
                                                ABS ;
                                                DIG 20 ;
                                                DUP ;
                                                DUG 21 ;
                                                DIG 20 ;
                                                DUP ;
                                                DUG 21 ;
                                                CONTRACT %transfer (pair address (pair address nat)) ;
                                                IF_NONE { PUSH string "NotFound" ; FAILWITH } {} ;
                                                PUSH mutez 0 ;
                                                DIG 3 ;
                                                DUP ;
                                                DUG 4 ;
                                                DIG 6 ;
                                                DUP ;
                                                DUG 7 ;
                                                CAR ;
                                                PAIR ;
                                                SENDER ;
                                                PAIR ;
                                                TRANSFER_TOKENS ;
                                                CONS ;
                                                DIP { DIG 20 ; DROP } ;
                                                DUG 20 ;
                                                PUSH int 0 ;
                                                DIG 1 ;
                                                DUP ;
                                                DUG 2 ;
                                                INT ;
                                                DIG 5 ;
                                                DUP ;
                                                DUG 6 ;
                                                SUB ;
                                                COMPARE ;
                                                GE ;
                                                IF { DUP ; INT ; DIG 4 ; DUP ; DUG 5 ; SUB ; ABS }
                                                   { PUSH string "NatAssign" ; FAILWITH } ;
                                                DIP { DIG 3 ; DROP } ;
                                                DUG 3 ;
                                                DROP 3 } ;
                                         DIG 17 ;
                                         DUP ;
                                         DUG 18 ;
                                         DIG 17 ;
                                         DUP ;
                                         DUG 18 ;
                                         CONTRACT %transfer (pair address (pair address nat)) ;
                                         IF_NONE { PUSH string "NotFound" ; FAILWITH } {} ;
                                         PUSH mutez 0 ;
                                         DIG 5 ;
                                         DUP ;
                                         DUG 6 ;
                                         DIG 19 ;
                                         DUP ;
                                         DUG 20 ;
                                         PAIR ;
                                         SENDER ;
                                         PAIR ;
                                         TRANSFER_TOKENS ;
                                         CONS ;
                                         DIP { DIG 17 ; DROP } ;
                                         DUG 17 ;
                                         DIG 17 ;
                                         DUP ;
                                         DUG 18 ;
                                         DIG 17 ;
                                         DUP ;
                                         DUG 18 ;
                                         CONTRACT %transfer (pair address (pair address nat)) ;
                                         IF_NONE { PUSH string "NotFound" ; FAILWITH } {} ;
                                         PUSH mutez 0 ;
                                         DIG 3 ;
                                         DUP ;
                                         DUG 4 ;
                                         DIG 8 ;
                                         DUP ;
                                         DUG 9 ;
                                         PAIR ;
                                         SENDER ;
                                         PAIR ;
                                         TRANSFER_TOKENS ;
                                         CONS ;
                                         DIP { DIG 17 ; DROP } ;
                                         DUG 17 ;
                                         DIG 17 ;
                                         DUP ;
                                         DUG 18 ;
                                         SELF ;
                                         ADDRESS ;
                                         CONTRACT %transfer (list (pair address (list (pair address (pair nat nat))))) ;
                                         IF_NONE { PUSH string "NotFound" ; FAILWITH } {} ;
                                         PUSH mutez 0 ;
                                         NIL (pair address (list (pair (address %to_) (pair (nat %token_id) (nat %amount))))) ;
                                         NIL (pair (address %to_) (pair (nat %token_id) (nat %amount))) ;
                                         PUSH nat 1 ;
                                         DIG 12 ;
                                         DUP ;
                                         DUG 13 ;
                                         PAIR ;
                                         DIG 9 ;
                                         DUP ;
                                         DUG 10 ;
                                         PAIR ;
                                         CONS ;
                                         DIG 9 ;
                                         DUP ;
                                         DUG 10 ;
                                         PAIR ;
                                         CONS ;
                                         TRANSFER_TOKENS ;
                                         CONS ;
                                         DIP { DIG 17 ; DROP } ;
                                         DUG 17 ;
                                         DROP 7 ;
                                         SWAP ;
                                         PAIR ;
                                         SWAP ;
                                         PAIR ;
                                         SWAP ;
                                         PAIR ;
                                         SWAP ;
                                         PAIR ;
                                         SWAP ;
                                         PAIR ;
                                         SWAP ;
                                         PAIR ;
                                         SWAP ;
                                         PAIR ;
                                         SWAP ;
                                         PAIR ;
                                         SWAP ;
                                         PAIR ;
                                         DIG 1 ;
                                         PAIR }
                                       { IF_LEFT
                                           { DIG 11 ;
                                             DUP ;
                                             DUG 12 ;
                                             DIG 1 ;
                                             DUP ;
                                             DUG 2 ;
                                             PUSH mutez 0 ;
                                             SELF ;
                                             ADDRESS ;
                                             TRANSFER_TOKENS ;
                                             CONS ;
                                             DIP { DIG 11 ; DROP } ;
                                             DUG 11 ;
                                             DROP ;
                                             SWAP ;
                                             PAIR ;
                                             SWAP ;
                                             PAIR ;
                                             SWAP ;
                                             PAIR ;
                                             SWAP ;
                                             PAIR ;
                                             SWAP ;
                                             PAIR ;
                                             SWAP ;
                                             PAIR ;
                                             SWAP ;
                                             PAIR ;
                                             SWAP ;
                                             PAIR ;
                                             SWAP ;
                                             PAIR ;
                                             DIG 1 ;
                                             PAIR }
                                           { IF_LEFT
                                               { DIG 8 ;
                                                 DUP ;
                                                 DUG 9 ;
                                                 SENDER ;
                                                 COMPARE ;
                                                 EQ ;
                                                 NOT ;
                                                 IF { PUSH string "InvalidCaller" ; FAILWITH } {} ;
                                                 DUP ;
                                                 DIP { DIG 7 ; DROP } ;
                                                 DUG 7 ;
                                                 DROP ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 DIG 1 ;
                                                 PAIR }
                                               { DROP ;
                                                 DIG 6 ;
                                                 DUP ;
                                                 DUG 7 ;
                                                 SENDER ;
                                                 COMPARE ;
                                                 EQ ;
                                                 NOT ;
                                                 IF { PUSH string "InvalidCaller" ; FAILWITH } {} ;
                                                 DIG 6 ;
                                                 DUP ;
                                                 DUG 7 ;
                                                 DIP { DIG 7 ; DROP } ;
                                                 DUG 7 ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 SWAP ;
                                                 PAIR ;
                                                 DIG 1 ;
                                                 PAIR } } } } } } } } } } ;
         DIP { DROP } } }
