{ parameter
    (or (or (nat %deposit) (address %updateAdmin))
        (or (pair %updateStake
               (pair %token
                  (address %address)
                  (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
               (pair (nat %minAmount) (pair (nat %maxAmount) (int %lockTime))))
            (nat %withdraw))) ;
  storage
    (pair (big_map %metadata string bytes)
          (pair (pair %stake
                   (pair %token
                      (address %address)
                      (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                   (pair (nat %stakedAmount)
                         (pair (nat %minAmount) (pair (nat %maxAmount) (int %lockTime)))))
                (pair (big_map %ledger address (pair (nat %amount) (timestamp %unlock)))
                      (address %admin)))) ;
  code { LAMBDA
           (pair (pair address address) (pair (pair address (pair nat (or unit unit))) nat))
           operation
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             DUP ;
             GET 4 ;
             IF_LEFT
               { DROP ;
                 CAR ;
                 CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))) ;
                 IF_NONE { PUSH string "CANNOT_INVOKE_FA1_TRANSFER" ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 DIG 3 ;
                 DIG 4 ;
                 DIG 4 ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 TRANSFER_TOKENS }
               { DROP ;
                 DUP ;
                 CAR ;
                 CONTRACT %transfer
                   (list (pair (address %from_)
                               (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                 IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 NIL (pair address (list (pair address (pair nat nat)))) ;
                 DIG 5 ;
                 NIL (pair address (pair nat nat)) ;
                 DIG 7 ;
                 DIG 6 ;
                 GET 3 ;
                 DIG 7 ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 CONS ;
                 SWAP ;
                 PAIR ;
                 CONS ;
                 TRANSFER_TOKENS } } ;
         NIL operation ;
         LAMBDA
           (pair (big_map string bytes)
                 (pair (pair (pair address (pair nat (or unit unit))) (pair nat (pair nat (pair nat int))))
                       (pair (big_map address (pair nat timestamp)) address)))
           unit
           { GET 6 ;
             SENDER ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "INVALID_ACCESS" ; FAILWITH } { PUSH unit Unit } } ;
         LAMBDA
           (pair address
                 (pair (big_map string bytes)
                       (pair (pair (pair address (pair nat (or unit unit))) (pair nat (pair nat (pair nat int))))
                             (pair (big_map address (pair nat timestamp)) address))))
           (pair nat timestamp)
           { UNPAIR ;
             PUSH nat 0 ;
             NOW ;
             SWAP ;
             PAIR ;
             DIG 2 ;
             GET 5 ;
             DIG 2 ;
             GET ;
             IF_NONE {} { SWAP ; DROP } } ;
         DIG 4 ;
         UNPAIR ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         GT ;
         IF { PUSH string "INVALID_AMOUNT_TEZ_REFUSED" ; FAILWITH } {} ;
         IF_LEFT
           { IF_LEFT
               { DIG 3 ;
                 DIG 4 ;
                 DROP 2 ;
                 PUSH nat 1 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 LT ;
                 IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 SENDER ;
                 PAIR ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 DUP 3 ;
                 GET 3 ;
                 GET 5 ;
                 DUP 3 ;
                 DUP 3 ;
                 CAR ;
                 ADD ;
                 COMPARE ;
                 LT ;
                 PUSH nat 0 ;
                 DUP 5 ;
                 GET 3 ;
                 GET 5 ;
                 COMPARE ;
                 GT ;
                 AND ;
                 IF { PUSH string "MIN_AMOUNT_NOT_MET" ; FAILWITH } {} ;
                 DUP 3 ;
                 GET 3 ;
                 GET 7 ;
                 DUP 3 ;
                 DUP 3 ;
                 CAR ;
                 ADD ;
                 COMPARE ;
                 GT ;
                 PUSH nat 0 ;
                 DUP 5 ;
                 GET 3 ;
                 GET 7 ;
                 COMPARE ;
                 GT ;
                 AND ;
                 IF { PUSH string "MAX_AMOUNT_EXCEEDED" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 DUP 4 ;
                 GET 3 ;
                 CAR ;
                 PAIR ;
                 SELF_ADDRESS ;
                 SENDER ;
                 PAIR ;
                 PAIR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 DUP 4 ;
                 DIG 3 ;
                 CAR ;
                 ADD ;
                 UPDATE 1 ;
                 DUP 4 ;
                 GET 3 ;
                 GET 8 ;
                 NOW ;
                 ADD ;
                 UPDATE 2 ;
                 DIG 3 ;
                 DUP ;
                 DUP ;
                 DUG 5 ;
                 GET 3 ;
                 DIG 4 ;
                 DIG 5 ;
                 GET 3 ;
                 GET 3 ;
                 ADD ;
                 UPDATE 3 ;
                 UPDATE 3 ;
                 DUP ;
                 GET 5 ;
                 DIG 2 ;
                 SOME ;
                 SENDER ;
                 UPDATE ;
                 UPDATE 5 ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR }
               { DIG 2 ;
                 DIG 5 ;
                 DROP 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 UPDATE 6 ;
                 SWAP ;
                 PAIR } }
           { IF_LEFT
               { DIG 2 ;
                 DIG 5 ;
                 DROP 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 GET 3 ;
                 DUP 3 ;
                 CAR ;
                 UPDATE 1 ;
                 DUP 3 ;
                 GET 3 ;
                 UPDATE 5 ;
                 DUP 3 ;
                 GET 5 ;
                 UPDATE 7 ;
                 DIG 2 ;
                 GET 6 ;
                 UPDATE 8 ;
                 UPDATE 3 ;
                 SWAP ;
                 PAIR }
               { DIG 3 ;
                 DIG 4 ;
                 DROP 2 ;
                 PUSH nat 1 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 LT ;
                 IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 SENDER ;
                 PAIR ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 COMPARE ;
                 LT ;
                 IF { PUSH string "INSUFFICIENT_FUNDS" ; FAILWITH } {} ;
                 NOW ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 COMPARE ;
                 GT ;
                 IF { PUSH string "FUNDS_LOCKED" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 DUP 4 ;
                 GET 3 ;
                 CAR ;
                 PAIR ;
                 SENDER ;
                 SELF_ADDRESS ;
                 PAIR ;
                 PAIR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 DUP 4 ;
                 DIG 3 ;
                 CAR ;
                 SUB ;
                 ABS ;
                 UPDATE 1 ;
                 DIG 3 ;
                 DUP ;
                 DUP ;
                 DUG 5 ;
                 GET 3 ;
                 DIG 4 ;
                 DIG 5 ;
                 GET 3 ;
                 GET 3 ;
                 SUB ;
                 ABS ;
                 UPDATE 3 ;
                 UPDATE 3 ;
                 DUP ;
                 GET 5 ;
                 DIG 2 ;
                 SOME ;
                 SENDER ;
                 UPDATE ;
                 UPDATE 5 ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR } } } }
