{ parameter
    (or (or (nat %deposit) (address %updateOwner))
        (or (nat %withdraw) (address %withdrawProfit))) ;
  storage
    (pair (big_map %metadata string bytes)
          (pair (pair %stake
                   (pair %stakeToken (address %address) (nat %tokenId))
                   (pair (nat %stakeBalance) (pair (nat %minStake) (address %owner))))
                (big_map %ledger address nat))) ;
  code { LAMBDA
           (pair (pair address address) (pair (pair address nat) nat))
           operation
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             DUP ;
             CAR ;
             CONTRACT %transfer
               (list (pair (address %from_)
                           (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
             IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
             PUSH mutez 0 ;
             NIL (pair address (list (pair address (pair nat nat)))) ;
             DIG 5 ;
             NIL (pair address (pair nat nat)) ;
             DIG 7 ;
             DIG 6 ;
             CDR ;
             DIG 7 ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             CONS ;
             SWAP ;
             PAIR ;
             CONS ;
             TRANSFER_TOKENS } ;
         LAMBDA
           address
           unit
           { PUSH bool False ;
             SWAP ;
             SENDER ;
             COMPARE ;
             EQ ;
             COMPARE ;
             EQ ;
             IF { PUSH string "INVALID_ACCESS" ; FAILWITH } { PUSH unit Unit } } ;
         LAMBDA
           (pair address
                 (pair (big_map string bytes)
                       (pair (pair (pair address nat) (pair nat (pair nat address))) (big_map address nat))))
           nat
           { UNPAIR ; SWAP ; GET 4 ; SWAP ; GET ; IF_NONE { PUSH nat 0 } {} } ;
         DIG 3 ;
         UNPAIR ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         GT ;
         IF { PUSH string "INVALID_AMOUNT_TEZ_REFUSED" ; FAILWITH } {} ;
         IF_LEFT
           { IF_LEFT
               { DIG 3 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 SENDER ;
                 PUSH nat 0 ;
                 DUP 4 ;
                 COMPARE ;
                 LE ;
                 IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 5 ;
                 DUP 4 ;
                 COMPARE ;
                 LT ;
                 IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                 DUP 4 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DUP 4 ;
                 DUP 4 ;
                 CAR ;
                 PAIR ;
                 SELF_ADDRESS ;
                 SENDER ;
                 PAIR ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 DUP 6 ;
                 DIG 3 ;
                 ADD ;
                 UPDATE 0 ;
                 DUP 4 ;
                 DIG 5 ;
                 DIG 5 ;
                 GET 3 ;
                 ADD ;
                 UPDATE 3 ;
                 DIG 4 ;
                 SWAP ;
                 UPDATE 3 ;
                 DUP ;
                 GET 4 ;
                 DIG 2 ;
                 DIG 4 ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 UPDATE 4 ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR }
               { DIG 2 ;
                 DROP ;
                 DIG 3 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 GET 6 ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 GET 3 ;
                 DIG 2 ;
                 UPDATE 6 ;
                 UPDATE 3 ;
                 NIL operation ;
                 PAIR } }
           { IF_LEFT
               { DIG 3 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 SENDER ;
                 PUSH nat 0 ;
                 DUP 4 ;
                 COMPARE ;
                 LE ;
                 IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 DUP 4 ;
                 COMPARE ;
                 GT ;
                 IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                 DUP 4 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DUP 4 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 LT ;
                 IF { PUSH string "INSUFFICIENT_FUNDS" ; FAILWITH } {} ;
                 DUP 4 ;
                 DUP 4 ;
                 CAR ;
                 PAIR ;
                 SENDER ;
                 SELF_ADDRESS ;
                 PAIR ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 DUP 6 ;
                 DIG 3 ;
                 SUB ;
                 ABS ;
                 UPDATE 0 ;
                 DUP 4 ;
                 DIG 5 ;
                 DIG 5 ;
                 GET 3 ;
                 SUB ;
                 ABS ;
                 UPDATE 3 ;
                 DIG 4 ;
                 SWAP ;
                 UPDATE 3 ;
                 DUP ;
                 GET 4 ;
                 DIG 2 ;
                 DIG 4 ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 UPDATE 4 ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR }
               { DIG 2 ;
                 DROP ;
                 DIG 3 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 GET 6 ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 DIG 2 ;
                 GET 3 ;
                 CAR ;
                 CAR ;
                 CONTRACT %withdrawProfit address ;
                 IF_NONE { PUSH string "CANNOT_INVOKE_QUIPU_WITHDRAW_PROFIT" ; FAILWITH } {} ;
                 NIL operation ;
                 SWAP ;
                 PUSH mutez 0 ;
                 DIG 3 ;
                 TRANSFER_TOKENS ;
                 CONS ;
                 PAIR } } } }
