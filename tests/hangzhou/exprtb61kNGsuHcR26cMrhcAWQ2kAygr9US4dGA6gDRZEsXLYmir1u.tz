{ storage
    (pair (pair (pair (pair (address %addressToSendLiquidity) (address %admin))
                      (pair (nat %decimals)
                            (pair (big_map %isParticipated address bool) (mutez %minimumParticipation))))
                (pair (pair (mutez %originalPrice) (nat %privateSaleTokensSold))
                      (pair (timestamp %salePublicEndTime)
                            (pair (timestamp %salePublicStartTime) (nat %status)))))
          (pair (pair (pair (address %token) (nat %tokenId))
                      (pair (mutez %tokenPrice)
                            (pair (timestamp %tokensFirstUnlockTime) (timestamp %tokensFullUnlockTime))))
                (pair (pair (nat %tokensToSell) (nat %totalTokensSold))
                      (pair (mutez %totalXTZRaised)
                            (pair (big_map %userToHisParticipationDetails
                                     address
                                     (pair (pair (map %SaleMap
                                                    nat
                                                    (pair (nat %amountOfTokensReceived)
                                                          (pair (mutez %amountXTZPaid) (timestamp %timestamp))))
                                                 (nat %counter))
                                           (pair (mutez %netPoolContribution)
                                                 (pair (nat %totalAllocation) (nat %totalWithdrawn)))))
                                  (big_map %whitelist address bool)))))) ;
  parameter
    (or (or (unit %depositTokens) (or (unit %participateSale) (nat %rescueFunds)))
        (or (unit %transferLiquidity)
            (or (list %whitelistParticipants address) (unit %withdrawTokens)))) ;
  code { CAST (pair (or (or unit (or unit nat)) (or unit (or (list address) unit)))
                    (pair (pair (pair (pair address address) (pair nat (pair (big_map address bool) mutez)))
                                (pair (pair mutez nat) (pair timestamp (pair timestamp nat))))
                          (pair (pair (pair address nat) (pair mutez (pair timestamp timestamp)))
                                (pair (pair nat nat)
                                      (pair mutez
                                            (pair (big_map
                                                     address
                                                     (pair (pair (map nat (pair nat (pair mutez timestamp))) nat) (pair mutez (pair nat nat))))
                                                  (big_map address bool))))))) ;
         UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { DROP ;
                 DUP ;
                 CAR ;
                 GET 8 ;
                 PUSH nat 0 ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "WrongCondition: self.data.status == 0" ; FAILWITH } ;
                 DUP ;
                 GET 3 ;
                 CAR ;
                 CAR ;
                 CONTRACT %transfer (list (pair address (list (pair address (pair nat nat))))) ;
                 IF_NONE { PUSH int 182 ; FAILWITH } {} ;
                 NIL operation ;
                 SWAP ;
                 PUSH mutez 0 ;
                 NIL (pair address (list (pair address (pair nat nat)))) ;
                 NIL (pair address (pair nat nat)) ;
                 DIG 5 ;
                 DUP ;
                 GET 5 ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 7 ;
                 GET 3 ;
                 CAR ;
                 CDR ;
                 SELF_ADDRESS ;
                 PAIR 3 ;
                 CONS ;
                 SENDER ;
                 PAIR ;
                 CONS ;
                 TRANSFER_TOKENS ;
                 CONS ;
                 PUSH nat 0 ;
                 DUP 3 ;
                 CAR ;
                 GET 8 ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "WrongCondition: self.data.status == 0" ; FAILWITH } ;
                 SWAP ;
                 UNPAIR ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 CAR ;
                 PUSH nat 1 ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 SWAP }
               { IF_LEFT
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     GET 7 ;
                     NOW ;
                     COMPARE ;
                     GT ;
                     IF {}
                        { PUSH string "WrongCondition: sp.now > self.data.salePublicStartTime" ;
                          FAILWITH } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     GET 5 ;
                     NOW ;
                     COMPARE ;
                     LE ;
                     IF {}
                        { PUSH string "WrongCondition: sp.now <= self.data.salePublicEndTime" ;
                          FAILWITH } ;
                     PUSH nat 1 ;
                     DUP 3 ;
                     CAR ;
                     GET 8 ;
                     COMPARE ;
                     EQ ;
                     IF {} { PUSH string "WrongCondition: self.data.status == 1" ; FAILWITH } ;
                     AMOUNT ;
                     DUP 3 ;
                     CAR ;
                     CAR ;
                     GET 6 ;
                     COMPARE ;
                     LE ;
                     IF {} { PUSH string "AMOUNT LESS THAN MINIMUM AMOUNT" ; FAILWITH } ;
                     PUSH mutez 1 ;
                     AMOUNT ;
                     EDIV ;
                     IF_NONE { UNIT ; FAILWITH } {} ;
                     CAR ;
                     PUSH mutez 1 ;
                     DUP 4 ;
                     CAR ;
                     GET 3 ;
                     CAR ;
                     EDIV ;
                     IF_NONE { UNIT ; FAILWITH } {} ;
                     CAR ;
                     DUP 4 ;
                     GET 10 ;
                     SENDER ;
                     MEM ;
                     IF { DROP ;
                          SWAP ;
                          DROP ;
                          PUSH mutez 1 ;
                          DUP 3 ;
                          GET 3 ;
                          GET 3 ;
                          EDIV ;
                          IF_NONE { UNIT ; FAILWITH } {} ;
                          CAR }
                        { DIG 2 ; DROP } ;
                     DUP 3 ;
                     CAR ;
                     CAR ;
                     GET 3 ;
                     DIG 2 ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH int 97 ; FAILWITH } { CAR } ;
                     DUP ;
                     INT ;
                     DIG 2 ;
                     DUP ;
                     GET 5 ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 4 ;
                     GET 5 ;
                     CAR ;
                     SUB ;
                     COMPARE ;
                     GE ;
                     IF {} { PUSH string "Not enough Tokens" ; FAILWITH } ;
                     SWAP ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     UNPAIR ;
                     SWAP ;
                     DUP 6 ;
                     ADD ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DUP ;
                     GET 7 ;
                     AMOUNT ;
                     ADD ;
                     UPDATE 7 ;
                     DUP ;
                     DUG 2 ;
                     GET 9 ;
                     SENDER ;
                     MEM ;
                     IF {}
                        { SWAP ;
                          DUP ;
                          GET 9 ;
                          PUSH (option
                                  (pair (pair (map nat (pair nat (pair mutez timestamp))) nat) (pair mutez (pair nat nat))))
                               (Some (Pair (Pair {} 0) (Pair 0 (Pair 0 0)))) ;
                          SENDER ;
                          UPDATE ;
                          UPDATE 9 ;
                          SWAP } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 9 ;
                     SENDER ;
                     GET ;
                     IF_NONE { PUSH int 220 ; FAILWITH } {} ;
                     CAR ;
                     CDR ;
                     DIG 2 ;
                     DUP ;
                     GET 9 ;
                     DUP ;
                     SENDER ;
                     DUP ;
                     DUG 2 ;
                     GET ;
                     IF_NONE { PUSH int 223 ; FAILWITH } {} ;
                     UNPAIR ;
                     UNPAIR ;
                     NOW ;
                     AMOUNT ;
                     DUP 10 ;
                     PAIR 3 ;
                     SOME ;
                     DIG 7 ;
                     UPDATE ;
                     PAIR ;
                     PAIR ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 9 ;
                     DUP ;
                     GET 9 ;
                     DUP ;
                     SENDER ;
                     DUP ;
                     DUG 2 ;
                     GET ;
                     IF_NONE { PUSH int 225 ; FAILWITH } {} ;
                     UNPAIR ;
                     UNPAIR ;
                     SWAP ;
                     PUSH nat 1 ;
                     ADD ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 9 ;
                     DUP ;
                     GET 9 ;
                     DUP ;
                     SENDER ;
                     DUP ;
                     DUG 2 ;
                     GET ;
                     IF_NONE { PUSH int 226 ; FAILWITH } {} ;
                     DUP ;
                     GET 5 ;
                     DIG 5 ;
                     ADD ;
                     UPDATE 5 ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 9 ;
                     DUP ;
                     GET 9 ;
                     DUP ;
                     SENDER ;
                     DUP ;
                     DUG 2 ;
                     GET ;
                     IF_NONE { PUSH int 107 ; FAILWITH } {} ;
                     DUP ;
                     GET 3 ;
                     AMOUNT ;
                     ADD ;
                     UPDATE 3 ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 9 ;
                     NIL operation }
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     IF {} { PUSH string "CAN ONLY BE CALLED BY ADMIN" ; FAILWITH } ;
                     PUSH mutez 1 ;
                     BALANCE ;
                     EDIV ;
                     IF_NONE { UNIT ; FAILWITH } {} ;
                     CAR ;
                     PUSH nat 0 ;
                     COMPARE ;
                     LT ;
                     IF { NIL operation ;
                          DUP 3 ;
                          CAR ;
                          CAR ;
                          CAR ;
                          CDR ;
                          CONTRACT unit ;
                          IF_NONE { PUSH string "Not enough Funds / Transfer Error" ; FAILWITH } {} ;
                          BALANCE ;
                          UNIT ;
                          TRANSFER_TOKENS ;
                          CONS }
                        { NIL operation } ;
                     DUP 3 ;
                     GET 3 ;
                     CAR ;
                     CAR ;
                     CONTRACT %transfer (list (pair address (list (pair address (pair nat nat))))) ;
                     IF_NONE { PUSH int 182 ; FAILWITH } {} ;
                     PUSH mutez 0 ;
                     NIL (pair address (list (pair address (pair nat nat)))) ;
                     NIL (pair address (pair nat nat)) ;
                     DIG 5 ;
                     DIG 6 ;
                     DUP ;
                     GET 3 ;
                     CAR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 8 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     PAIR 3 ;
                     CONS ;
                     SELF_ADDRESS ;
                     PAIR ;
                     CONS ;
                     TRANSFER_TOKENS ;
                     CONS } } }
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 CDR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "ONLY ADMIN CAN TRANSFER LIQUIDITY" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET 5 ;
                 NOW ;
                 COMPARE ;
                 GT ;
                 IF {}
                    { PUSH string "WrongCondition: sp.now > self.data.salePublicEndTime" ;
                      FAILWITH } ;
                 SWAP ;
                 DUP ;
                 GET 5 ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 3 ;
                 GET 5 ;
                 CAR ;
                 SUB ;
                 ISNAT ;
                 IF_NONE { PUSH int 138 ; FAILWITH } {} ;
                 DUP ;
                 PUSH nat 0 ;
                 COMPARE ;
                 LT ;
                 IF { SWAP ;
                      DROP ;
                      NIL operation ;
                      DUP 3 ;
                      GET 3 ;
                      CAR ;
                      CAR ;
                      CONTRACT %transfer (list (pair address (list (pair address (pair nat nat))))) ;
                      IF_NONE { PUSH int 182 ; FAILWITH } {} ;
                      PUSH mutez 0 ;
                      NIL (pair address (list (pair address (pair nat nat)))) ;
                      NIL (pair address (pair nat nat)) ;
                      DIG 5 ;
                      DIG 6 ;
                      DUP ;
                      GET 3 ;
                      CAR ;
                      CDR ;
                      SWAP ;
                      DUP ;
                      DUG 8 ;
                      CAR ;
                      CAR ;
                      CAR ;
                      CAR ;
                      PAIR 3 ;
                      CONS ;
                      SELF_ADDRESS ;
                      PAIR ;
                      CONS ;
                      TRANSFER_TOKENS ;
                      CONS }
                    { DROP 2 ; NIL operation } ;
                 PUSH mutez 1 ;
                 BALANCE ;
                 EDIV ;
                 IF_NONE { UNIT ; FAILWITH } {} ;
                 CAR ;
                 PUSH nat 0 ;
                 COMPARE ;
                 LT ;
                 IF { SWAP ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CAR ;
                      CAR ;
                      CAR ;
                      CONTRACT unit ;
                      IF_NONE { PUSH string "Not enough Funds / Transfer Error" ; FAILWITH } {} ;
                      BALANCE ;
                      UNIT ;
                      TRANSFER_TOKENS ;
                      CONS }
                    {} ;
                 PUSH nat 1 ;
                 DUP 3 ;
                 CAR ;
                 GET 8 ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "WrongCondition: self.data.status == 1" ; FAILWITH } ;
                 SWAP ;
                 UNPAIR ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 CAR ;
                 PUSH nat 2 ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 SWAP }
               { IF_LEFT
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     IF {} { PUSH string "ONLY ADMIN CAN WHITELIST" ; FAILWITH } ;
                     DUP ;
                     ITER { DIG 2 ;
                            DUP ;
                            GET 10 ;
                            PUSH (option bool) (Some True) ;
                            DIG 3 ;
                            UPDATE ;
                            UPDATE 10 ;
                            SWAP } ;
                     DROP ;
                     NIL operation }
                   { PUSH nat 2 ;
                     DUP 3 ;
                     CAR ;
                     GET 8 ;
                     COMPARE ;
                     EQ ;
                     IF {}
                        { PUSH string "Can't withdraw before liquidity is transferred." ; FAILWITH } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     GET 5 ;
                     NOW ;
                     COMPARE ;
                     GT ;
                     IF {} { PUSH string "Tokens are not unlocked yet." ; FAILWITH } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 9 ;
                     SENDER ;
                     MEM ;
                     IF {} { PUSH string "NOT PARTICIPATED IN SALE" ; FAILWITH } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 9 ;
                     SENDER ;
                     GET ;
                     IF_NONE { PUSH int 117 ; FAILWITH } {} ;
                     GET 5 ;
                     DUP 3 ;
                     GET 9 ;
                     SENDER ;
                     GET ;
                     IF_NONE { PUSH int 118 ; FAILWITH } {} ;
                     GET 6 ;
                     DUP 4 ;
                     GET 3 ;
                     GET 6 ;
                     NOW ;
                     COMPARE ;
                     GT ;
                     IF { DIG 2 ;
                          DROP ;
                          SWAP ;
                          SUB ;
                          ISNAT ;
                          IF_NONE { PUSH int 122 ; FAILWITH } {} }
                        { DROP ;
                          SWAP ;
                          DROP ;
                          PUSH nat 100 ;
                          PUSH nat 40 ;
                          DIG 2 ;
                          MUL ;
                          EDIV ;
                          IF_NONE { PUSH int 124 ; FAILWITH } { CAR } } ;
                     NIL operation ;
                     DUP 3 ;
                     GET 3 ;
                     CAR ;
                     CAR ;
                     CONTRACT %transfer (list (pair address (list (pair address (pair nat nat))))) ;
                     IF_NONE { PUSH int 182 ; FAILWITH } {} ;
                     PUSH mutez 0 ;
                     NIL (pair address (list (pair address (pair nat nat)))) ;
                     NIL (pair address (pair nat nat)) ;
                     DUP 6 ;
                     DUP 8 ;
                     GET 3 ;
                     CAR ;
                     CDR ;
                     SENDER ;
                     PAIR 3 ;
                     CONS ;
                     SELF_ADDRESS ;
                     PAIR ;
                     CONS ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     DIG 2 ;
                     DUP ;
                     GET 9 ;
                     DUP ;
                     SENDER ;
                     DUP ;
                     DUG 2 ;
                     GET ;
                     IF_NONE { PUSH int 131 ; FAILWITH } {} ;
                     DUP ;
                     GET 6 ;
                     DIG 6 ;
                     ADD ;
                     UPDATE 6 ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 9 ;
                     SWAP } } } ;
         NIL operation ;
         SWAP ;
         ITER { CONS } ;
         PAIR } }
