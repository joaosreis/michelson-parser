{ parameter
    (or (or (or (or (address %addToWhitelist)
                    (pair %create
                       (pair %farm
                          (pair %poolToken
                             (address %address)
                             (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                          (pair (pair %rewardToken
                                   (address %address)
                                   (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                                (pair (nat %rewardSupply)
                                      (pair (nat %rewardPerSec)
                                            (pair (timestamp %startTime)
                                                  (pair (timestamp %endTime)
                                                        (pair (int %lockDuration) (set %bonuses (pair (timestamp %endTime) (nat %multiplier))))))))))
                       (nat %serviceFeeId)))
                (or (pair %deposit nat nat) (nat %escape)))
            (or (or (nat %harvest) (address %removeFromWhitelist))
                (or (pair %rescue nat address) (address %updateAdmin))))
        (or (or (or (pair %updateOwner nat address) (address %updateServiceFeeRecipient))
                (or (map %updateServiceFees
                       nat
                       (pair (pair %flat
                                nat
                                (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2)))))
                             (nat %pct)))
                    (pair %withdraw nat nat)))
            (nat %withdrawProfit))) ;
  storage
    (pair (big_map %metadata string bytes)
          (pair (big_map %farms
                   nat
                   (pair (pair %poolToken
                            (address %address)
                            (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                         (pair (nat %poolBalance)
                               (pair (pair %rewardToken
                                        (address %address)
                                        (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                                     (pair (nat %rewardSupply)
                                           (pair (nat %rewardPaid)
                                                 (pair (timestamp %lastRewardTime)
                                                       (pair (nat %accRewardPerShare)
                                                             (pair (nat %rewardPerSec)
                                                                   (pair (timestamp %startTime)
                                                                         (pair (timestamp %endTime)
                                                                               (pair (int %lockDuration)
                                                                                     (pair (set %bonuses (pair (timestamp %endTime) (nat %multiplier))) (address %owner))))))))))))))
                (pair (nat %nextFarmId)
                      (pair (big_map %ledger
                               (pair nat address)
                               (pair (nat %amount) (pair (nat %rewardDebt) (timestamp %lockEndTime))))
                            (pair (big_map %vaults address address)
                                  (pair (address %admin)
                                        (pair (map %serviceFees
                                                 nat
                                                 (pair (pair %flat
                                                          nat
                                                          (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2)))))
                                                       (nat %pct)))
                                              (pair (address %serviceFeeRecipient) (set %serviceFeeWhitelist address))))))))) ;
  code { LAMBDA
           (pair timestamp timestamp)
           timestamp
           { UNPAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             LT ;
             IF { SWAP ; DROP } { DROP } } ;
         LAMBDA
           (pair nat nat)
           nat
           { UNPAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             LT ;
             IF { SWAP ; DROP } { DROP } } ;
         LAMBDA
           address
           unit
           { PUSH bool False ;
             SWAP ;
             SENDER ;
             COMPARE ;
             EQ ;
             COMPARE ;
             EQ ;
             IF { PUSH string "INVALID_ACCESS" ; FAILWITH } { PUSH unit Unit } } ;
         LAMBDA
           (pair (pair address address) (pair (pair address (pair nat (or unit unit))) nat))
           operation
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             DUP ;
             GET 4 ;
             IF_LEFT
               { DROP ;
                 CAR ;
                 CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))) ;
                 IF_NONE { PUSH string "CANNOT_INVOKE_FA1_TRANSFER" ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 DIG 3 ;
                 DIG 4 ;
                 DIG 4 ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 TRANSFER_TOKENS }
               { DROP ;
                 DUP ;
                 CAR ;
                 CONTRACT %transfer
                   (list (pair (address %from_)
                               (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                 IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 NIL (pair address (list (pair address (pair nat nat)))) ;
                 DIG 5 ;
                 NIL (pair address (pair nat nat)) ;
                 DIG 7 ;
                 DIG 6 ;
                 GET 3 ;
                 DIG 7 ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 CONS ;
                 SWAP ;
                 PAIR ;
                 CONS ;
                 TRANSFER_TOKENS } } ;
         NIL operation ;
         PUSH nat 1000000000000000 ;
         PUSH nat 1000 ;
         LAMBDA
           (pair (pair nat address)
                 (pair (big_map string bytes)
                       (pair (big_map
                                nat
                                (pair (pair address (pair nat (or unit unit)))
                                      (pair nat
                                            (pair (pair address (pair nat (or unit unit)))
                                                  (pair nat
                                                        (pair nat
                                                              (pair timestamp
                                                                    (pair nat
                                                                          (pair nat
                                                                                (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
                             (pair nat
                                   (pair (big_map (pair nat address) (pair nat (pair nat timestamp)))
                                         (pair (big_map address address)
                                               (pair address
                                                     (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                           (pair address (set address))))))))))
           (pair (pair address (pair nat (or unit unit)))
                 (pair nat
                       (pair (pair address (pair nat (or unit unit)))
                             (pair nat
                                   (pair nat
                                         (pair timestamp
                                               (pair nat
                                                     (pair nat
                                                           (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address))))))))))))
           { UNPAIR ;
             SWAP ;
             GET 3 ;
             SWAP ;
             CAR ;
             GET ;
             IF_NONE { PUSH string "INVALID_FARM" ; FAILWITH } {} } ;
         LAMBDA
           (pair (pair nat address)
                 (pair (big_map string bytes)
                       (pair (big_map
                                nat
                                (pair (pair address (pair nat (or unit unit)))
                                      (pair nat
                                            (pair (pair address (pair nat (or unit unit)))
                                                  (pair nat
                                                        (pair nat
                                                              (pair timestamp
                                                                    (pair nat
                                                                          (pair nat
                                                                                (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
                             (pair nat
                                   (pair (big_map (pair nat address) (pair nat (pair nat timestamp)))
                                         (pair (big_map address address)
                                               (pair address
                                                     (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                           (pair address (set address))))))))))
           (option address)
           { UNPAIR ; SWAP ; GET 9 ; SWAP ; CDR ; GET } ;
         DUP ;
         LAMBDA
           (pair (lambda
                    (pair (pair nat address)
                          (pair (big_map string bytes)
                                (pair (big_map
                                         nat
                                         (pair (pair address (pair nat (or unit unit)))
                                               (pair nat
                                                     (pair (pair address (pair nat (or unit unit)))
                                                           (pair nat
                                                                 (pair nat
                                                                       (pair timestamp
                                                                             (pair nat
                                                                                   (pair nat
                                                                                         (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
                                      (pair nat
                                            (pair (big_map (pair nat address) (pair nat (pair nat timestamp)))
                                                  (pair (big_map address address)
                                                        (pair address
                                                              (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                                    (pair address (set address))))))))))
                    (option address))
                 (pair (pair nat address)
                       (pair (big_map string bytes)
                             (pair (big_map
                                      nat
                                      (pair (pair address (pair nat (or unit unit)))
                                            (pair nat
                                                  (pair (pair address (pair nat (or unit unit)))
                                                        (pair nat
                                                              (pair nat
                                                                    (pair timestamp
                                                                          (pair nat
                                                                                (pair nat
                                                                                      (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
                                   (pair nat
                                         (pair (big_map (pair nat address) (pair nat (pair nat timestamp)))
                                               (pair (big_map address address)
                                                     (pair address
                                                           (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                                 (pair address (set address)))))))))))
           address
           { UNPAIR ;
             SWAP ;
             EXEC ;
             IF_NONE { PUSH string "NO_VAULT_FOUND" ; FAILWITH } {} } ;
         SWAP ;
         APPLY ;
         DIG 9 ;
         DUP 10 ;
         DUP 7 ;
         DIG 6 ;
         PAIR 4 ;
         LAMBDA
           (pair (pair nat
                       (pair nat (pair (lambda (pair nat nat) nat) (lambda (pair timestamp timestamp) timestamp))))
                 (pair (pair address (pair nat (or unit unit)))
                       (pair nat
                             (pair (pair address (pair nat (or unit unit)))
                                   (pair nat
                                         (pair nat
                                               (pair timestamp
                                                     (pair nat
                                                           (pair nat
                                                                 (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
           (pair (pair address (pair nat (or unit unit)))
                 (pair nat
                       (pair (pair address (pair nat (or unit unit)))
                             (pair nat
                                   (pair nat
                                         (pair timestamp
                                               (pair nat
                                                     (pair nat
                                                           (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address))))))))))))
           { UNPAIR ;
             UNPAIR 4 ;
             DIG 4 ;
             DUP ;
             GET 11 ;
             NOW ;
             COMPARE ;
             GT ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET 19 ;
             DUP 3 ;
             GET 11 ;
             COMPARE ;
             LT ;
             AND ;
             IF { DUP ;
                  GET 7 ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  GET 9 ;
                  COMPARE ;
                  GE ;
                  PUSH nat 0 ;
                  DUP 3 ;
                  GET 3 ;
                  COMPARE ;
                  EQ ;
                  PUSH nat 0 ;
                  DUP 4 ;
                  GET 7 ;
                  COMPARE ;
                  EQ ;
                  OR ;
                  OR ;
                  IF { SWAP ;
                       DROP ;
                       SWAP ;
                       DROP ;
                       SWAP ;
                       DROP ;
                       DUP ;
                       GET 19 ;
                       NOW ;
                       PAIR ;
                       DIG 2 ;
                       SWAP ;
                       EXEC ;
                       UPDATE 11 }
                     { NOW ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       GET 17 ;
                       COMPARE ;
                       LT ;
                       IF { DUP ;
                            GET 11 ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            GET 19 ;
                            NOW ;
                            PAIR ;
                            DUP 7 ;
                            SWAP ;
                            EXEC ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            DUP 4 ;
                            GET 23 ;
                            EMPTY_SET (pair timestamp nat) ;
                            SWAP ;
                            ITER { SWAP ;
                                   DUP 3 ;
                                   DUP 3 ;
                                   CAR ;
                                   COMPARE ;
                                   GE ;
                                   IF { SWAP ; PUSH bool True ; SWAP ; UPDATE } { SWAP ; DROP } } ;
                            SWAP ;
                            DROP ;
                            DUP 3 ;
                            DUP 3 ;
                            SUB ;
                            ABS ;
                            PUSH nat 0 ;
                            PAIR ;
                            SWAP ;
                            ITER { SWAP ;
                                   PAIR ;
                                   DUP ;
                                   CDR ;
                                   DUP ;
                                   CAR ;
                                   DUP 4 ;
                                   PAIR ;
                                   DUP 10 ;
                                   SWAP ;
                                   EXEC ;
                                   DUP 5 ;
                                   SWAP ;
                                   SUB ;
                                   ABS ;
                                   DUP 7 ;
                                   SWAP ;
                                   DUP 3 ;
                                   CDR ;
                                   MUL ;
                                   MUL ;
                                   DUP 3 ;
                                   CAR ;
                                   CAR ;
                                   ADD ;
                                   DUP 4 ;
                                   DIG 2 ;
                                   PUSH nat 0 ;
                                   DUP 3 ;
                                   DUP 3 ;
                                   CAR ;
                                   COMPARE ;
                                   LT ;
                                   IF { SWAP ; CAR ; DIG 2 ; SUB ; ABS ; ADD } { SWAP ; DROP ; SWAP ; DROP } ;
                                   DIG 2 ;
                                   CAR ;
                                   CDR ;
                                   PAIR ;
                                   DUP 8 ;
                                   SWAP ;
                                   EXEC ;
                                   SWAP ;
                                   PAIR } ;
                            SWAP ;
                            DROP ;
                            SWAP ;
                            DROP ;
                            DIG 4 ;
                            DROP ;
                            DUP 3 ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            CDR ;
                            MUL ;
                            SWAP ;
                            CAR ;
                            ADD }
                          { DIG 3 ; DROP ; PUSH nat 0 } ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       GET 3 ;
                       DIG 3 ;
                       DIG 4 ;
                       DUP 5 ;
                       GET 15 ;
                       DIG 4 ;
                       MUL ;
                       MUL ;
                       EDIV ;
                       IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                       CAR ;
                       EDIV ;
                       IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                       CAR ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       SWAP ;
                       DIG 2 ;
                       GET 13 ;
                       ADD ;
                       UPDATE 13 ;
                       DUP ;
                       GET 19 ;
                       NOW ;
                       PAIR ;
                       DIG 2 ;
                       SWAP ;
                       EXEC ;
                       UPDATE 11 } }
                { SWAP ; DROP ; SWAP ; DROP ; SWAP ; DROP ; SWAP ; DROP } } ;
         SWAP ;
         APPLY ;
         DUP 7 ;
         LAMBDA
           (pair (lambda
                    (pair (pair address address) (pair (pair address (pair nat (or unit unit))) nat))
                    operation)
                 (pair (pair address nat)
                       (pair (pair address (pair nat (or unit unit)))
                             (pair nat
                                   (pair (pair address (pair nat (or unit unit)))
                                         (pair nat
                                               (pair nat
                                                     (pair timestamp
                                                           (pair nat
                                                                 (pair nat
                                                                       (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address))))))))))))))
           operation
           { UNPAIR ;
             SWAP ;
             UNPAIR ;
             UNPAIR ;
             SWAP ;
             DIG 2 ;
             GET 5 ;
             PAIR ;
             SWAP ;
             SELF_ADDRESS ;
             PAIR ;
             PAIR ;
             EXEC } ;
         SWAP ;
         APPLY ;
         DUP 5 ;
         LAMBDA
           (pair (lambda
                    (pair (pair nat address)
                          (pair (big_map string bytes)
                                (pair (big_map
                                         nat
                                         (pair (pair address (pair nat (or unit unit)))
                                               (pair nat
                                                     (pair (pair address (pair nat (or unit unit)))
                                                           (pair nat
                                                                 (pair nat
                                                                       (pair timestamp
                                                                             (pair nat
                                                                                   (pair nat
                                                                                         (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
                                      (pair nat
                                            (pair (big_map (pair nat address) (pair nat (pair nat timestamp)))
                                                  (pair (big_map address address)
                                                        (pair address
                                                              (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                                    (pair address (set address))))))))))
                    (pair (pair address (pair nat (or unit unit)))
                          (pair nat
                                (pair (pair address (pair nat (or unit unit)))
                                      (pair nat
                                            (pair nat
                                                  (pair timestamp
                                                        (pair nat
                                                              (pair nat
                                                                    (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
                 (pair (pair nat address)
                       (pair (big_map string bytes)
                             (pair (big_map
                                      nat
                                      (pair (pair address (pair nat (or unit unit)))
                                            (pair nat
                                                  (pair (pair address (pair nat (or unit unit)))
                                                        (pair nat
                                                              (pair nat
                                                                    (pair timestamp
                                                                          (pair nat
                                                                                (pair nat
                                                                                      (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
                                   (pair nat
                                         (pair (big_map (pair nat address) (pair nat (pair nat timestamp)))
                                               (pair (big_map address address)
                                                     (pair address
                                                           (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                                 (pair address (set address)))))))))))
           (pair nat (pair nat timestamp))
           { UNPAIR ;
             SWAP ;
             UNPAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             PAIR ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             PUSH nat 0 ;
             PUSH nat 0 ;
             DIG 2 ;
             GET 21 ;
             NOW ;
             ADD ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             DIG 2 ;
             GET 7 ;
             DIG 2 ;
             GET ;
             IF_NONE {} { SWAP ; DROP } } ;
         SWAP ;
         APPLY ;
         DIG 10 ;
         DUP 8 ;
         DUP 8 ;
         DUP 6 ;
         DUP 5 ;
         PAIR 5 ;
         LAMBDA
           (pair (pair (lambda
                          (pair (pair nat address)
                                (pair (big_map string bytes)
                                      (pair (big_map
                                               nat
                                               (pair (pair address (pair nat (or unit unit)))
                                                     (pair nat
                                                           (pair (pair address (pair nat (or unit unit)))
                                                                 (pair nat
                                                                       (pair nat
                                                                             (pair timestamp
                                                                                   (pair nat
                                                                                         (pair nat
                                                                                               (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
                                            (pair nat
                                                  (pair (big_map (pair nat address) (pair nat (pair nat timestamp)))
                                                        (pair (big_map address address)
                                                              (pair address
                                                                    (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                                          (pair address (set address))))))))))
                          (pair nat (pair nat timestamp)))
                       (pair (lambda
                                (pair (pair address (pair nat (or unit unit)))
                                      (pair nat
                                            (pair (pair address (pair nat (or unit unit)))
                                                  (pair nat
                                                        (pair nat
                                                              (pair timestamp
                                                                    (pair nat
                                                                          (pair nat
                                                                                (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address))))))))))))
                                (pair (pair address (pair nat (or unit unit)))
                                      (pair nat
                                            (pair (pair address (pair nat (or unit unit)))
                                                  (pair nat
                                                        (pair nat
                                                              (pair timestamp
                                                                    (pair nat
                                                                          (pair nat
                                                                                (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
                             (pair (lambda
                                      (pair (pair nat address)
                                            (pair (big_map string bytes)
                                                  (pair (big_map
                                                           nat
                                                           (pair (pair address (pair nat (or unit unit)))
                                                                 (pair nat
                                                                       (pair (pair address (pair nat (or unit unit)))
                                                                             (pair nat
                                                                                   (pair nat
                                                                                         (pair timestamp
                                                                                               (pair nat
                                                                                                     (pair nat
                                                                                                           (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
                                                        (pair nat
                                                              (pair (big_map (pair nat address) (pair nat (pair nat timestamp)))
                                                                    (pair (big_map address address)
                                                                          (pair address
                                                                                (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                                                      (pair address (set address))))))))))
                                      (pair (pair address (pair nat (or unit unit)))
                                            (pair nat
                                                  (pair (pair address (pair nat (or unit unit)))
                                                        (pair nat
                                                              (pair nat
                                                                    (pair timestamp
                                                                          (pair nat
                                                                                (pair nat
                                                                                      (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
                                   (pair nat (lambda (pair nat nat) nat)))))
                 (pair (pair nat address)
                       (pair (big_map string bytes)
                             (pair (big_map
                                      nat
                                      (pair (pair address (pair nat (or unit unit)))
                                            (pair nat
                                                  (pair (pair address (pair nat (or unit unit)))
                                                        (pair nat
                                                              (pair nat
                                                                    (pair timestamp
                                                                          (pair nat
                                                                                (pair nat
                                                                                      (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
                                   (pair nat
                                         (pair (big_map (pair nat address) (pair nat (pair nat timestamp)))
                                               (pair (big_map address address)
                                                     (pair address
                                                           (pair (map nat (pair (pair nat (pair address (pair nat (or unit unit)))) nat))
                                                                 (pair address (set address)))))))))))
           nat
           { UNPAIR ;
             UNPAIR 5 ;
             DIG 5 ;
             UNPAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             PAIR ;
             DIG 5 ;
             SWAP ;
             EXEC ;
             DIG 4 ;
             SWAP ;
             EXEC ;
             DUG 2 ;
             PAIR ;
             DIG 2 ;
             SWAP ;
             EXEC ;
             DUG 2 ;
             DUP ;
             DUG 3 ;
             GET 13 ;
             DUP 3 ;
             CAR ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET 3 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             GT ;
             DUP 4 ;
             GET 7 ;
             DUP 5 ;
             GET 9 ;
             COMPARE ;
             LT ;
             AND ;
             IF { DUP 3 ;
                  GET 9 ;
                  DIG 3 ;
                  GET 7 ;
                  SUB ;
                  ABS ;
                  DIG 2 ;
                  GET 3 ;
                  DIG 2 ;
                  SUB ;
                  ABS ;
                  PAIR ;
                  EXEC }
                { DROP 4 ; PUSH nat 0 } } ;
         SWAP ;
         APPLY ;
         DIG 11 ;
         UNPAIR ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         GT ;
         IF { PUSH string "INVALID_AMOUNT_TEZ_REFUSED" ; FAILWITH } {} ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     IF_LEFT
                       { DIG 3 ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 11 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         GET 16 ;
                         DIG 2 ;
                         PUSH bool True ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 16 ;
                         SWAP ;
                         PAIR }
                       { DIG 2 ;
                         DROP ;
                         DIG 3 ;
                         DROP ;
                         DUP ;
                         CAR ;
                         NOW ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 9 ;
                         COMPARE ;
                         LT ;
                         IF { PUSH string "INVALID_START_TIME" ; FAILWITH } {} ;
                         DUP ;
                         GET 9 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 11 ;
                         COMPARE ;
                         LE ;
                         IF { PUSH string "INVALID_END_TIME" ; FAILWITH } {} ;
                         DUP ;
                         GET 14 ;
                         ITER { SWAP ;
                                DUP ;
                                DUG 2 ;
                                GET 9 ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                CAR ;
                                COMPARE ;
                                LE ;
                                IF { PUSH string "INVALID_BONUS_END_TIME" ; FAILWITH } {} ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                GET 11 ;
                                SWAP ;
                                CAR ;
                                COMPARE ;
                                GT ;
                                IF { PUSH string "INVALID_BONUS_END_TIME" ; FAILWITH } {} } ;
                         DUP ;
                         CAR ;
                         PUSH nat 0 ;
                         DUP 3 ;
                         GET 3 ;
                         DUP 4 ;
                         GET 5 ;
                         PUSH nat 0 ;
                         DUP 6 ;
                         GET 9 ;
                         PUSH nat 0 ;
                         DUP 8 ;
                         GET 7 ;
                         DUP 9 ;
                         GET 9 ;
                         DUP 10 ;
                         GET 11 ;
                         DUP 11 ;
                         GET 13 ;
                         DUP 12 ;
                         GET 14 ;
                         SENDER ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 5 ;
                         DIG 2 ;
                         GET 3 ;
                         PAIR ;
                         SELF_ADDRESS ;
                         SENDER ;
                         PAIR ;
                         PAIR ;
                         DUP 5 ;
                         SWAP ;
                         EXEC ;
                         SWAP ;
                         NIL operation ;
                         DIG 2 ;
                         CONS ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         DIG 3 ;
                         DUP ;
                         DUP ;
                         DUG 5 ;
                         GET 3 ;
                         DIG 3 ;
                         CDR ;
                         DIG 5 ;
                         GET 5 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         DUP ;
                         PUSH nat 1 ;
                         DIG 2 ;
                         GET 5 ;
                         ADD ;
                         UPDATE 5 ;
                         PUSH bool False ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 16 ;
                         SENDER ;
                         MEM ;
                         COMPARE ;
                         EQ ;
                         IF { DUP ;
                              DUP 4 ;
                              CDR ;
                              SWAP ;
                              GET 13 ;
                              SWAP ;
                              GET ;
                              IF_NONE { PUSH string "INVALID_SERVICE_FEE" ; FAILWITH } {} ;
                              PUSH nat 0 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              CAR ;
                              CAR ;
                              COMPARE ;
                              GT ;
                              IF { DUP ;
                                   CAR ;
                                   CAR ;
                                   SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   CAR ;
                                   CDR ;
                                   PAIR ;
                                   DUP 3 ;
                                   GET 15 ;
                                   SENDER ;
                                   PAIR ;
                                   PAIR ;
                                   DUP 6 ;
                                   SWAP ;
                                   EXEC ;
                                   DIG 3 ;
                                   SWAP ;
                                   CONS }
                                 { DIG 2 } ;
                              PUSH nat 0 ;
                              DUP 3 ;
                              CDR ;
                              COMPARE ;
                              GT ;
                              IF { PUSH nat 10000 ;
                                   DIG 2 ;
                                   CDR ;
                                   DUP 5 ;
                                   CAR ;
                                   GET 5 ;
                                   MUL ;
                                   EDIV ;
                                   IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                                   CAR ;
                                   DIG 3 ;
                                   CAR ;
                                   GET 3 ;
                                   PAIR ;
                                   DUP 3 ;
                                   GET 15 ;
                                   SENDER ;
                                   PAIR ;
                                   PAIR ;
                                   DIG 3 ;
                                   SWAP ;
                                   EXEC ;
                                   CONS }
                                 { SWAP ; DROP ; DIG 2 ; DROP ; DIG 2 ; DROP } }
                            { DIG 2 ; DROP ; DIG 2 ; DROP ; SWAP } ;
                         PAIR } }
                   { DIG 10 ;
                     DROP ;
                     DIG 11 ;
                     DROP ;
                     IF_LEFT
                       { DIG 6 ;
                         DROP ;
                         SENDER ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         PAIR ;
                         DUP 3 ;
                         DUP 3 ;
                         CDR ;
                         PAIR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         DUP 5 ;
                         DUP 4 ;
                         PAIR ;
                         DIG 11 ;
                         SWAP ;
                         EXEC ;
                         DIG 2 ;
                         UNPAIR ;
                         PUSH nat 0 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         COMPARE ;
                         LE ;
                         IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                         NOW ;
                         DUP 4 ;
                         GET 19 ;
                         COMPARE ;
                         LT ;
                         IF { PUSH string "FARM_ENDED" ; FAILWITH } {} ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         DUP 5 ;
                         PAIR ;
                         DIG 9 ;
                         SWAP ;
                         EXEC ;
                         DIG 3 ;
                         DIG 10 ;
                         SWAP ;
                         EXEC ;
                         NIL operation ;
                         DUP 5 ;
                         DUP 7 ;
                         PAIR ;
                         DIG 12 ;
                         SWAP ;
                         EXEC ;
                         IF_NONE
                           { SELF_ADDRESS ;
                             PUSH mutez 0 ;
                             NONE key_hash ;
                             CREATE_CONTRACT
                               { parameter
                                   (or (pair %withdrawal
                                          (pair (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                                                address)
                                          nat)
                                       (pair %withdrawalProfit
                                          (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                                          address)) ;
                                 storage address ;
                                 code { UNPAIR ;
                                        SWAP ;
                                        DUP ;
                                        DUG 2 ;
                                        SENDER ;
                                        COMPARE ;
                                        NEQ ;
                                        IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                                        IF_LEFT
                                          { NIL operation ;
                                            SWAP ;
                                            DUP ;
                                            DUG 2 ;
                                            CAR ;
                                            CAR ;
                                            GET 4 ;
                                            IF_LEFT
                                              { DROP ;
                                                SWAP ;
                                                DUP ;
                                                DUG 2 ;
                                                CAR ;
                                                CAR ;
                                                CAR ;
                                                CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))) ;
                                                IF_NONE { PUSH string "CANNOT_INVOKE_FA1_TRANSFER" ; FAILWITH } {} ;
                                                SELF_ADDRESS ;
                                                DUP 4 ;
                                                CAR ;
                                                CDR ;
                                                DIG 4 ;
                                                CDR ;
                                                SWAP ;
                                                PAIR ;
                                                SWAP ;
                                                PAIR ;
                                                DUG 2 ;
                                                PUSH mutez 0 ;
                                                DIG 3 ;
                                                TRANSFER_TOKENS ;
                                                CONS }
                                              { DROP ;
                                                SWAP ;
                                                DUP ;
                                                DUG 2 ;
                                                CAR ;
                                                CAR ;
                                                CAR ;
                                                CONTRACT %transfer
                                                  (list (pair (address %from_)
                                                              (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                                                IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
                                                SELF_ADDRESS ;
                                                NIL (pair address (pair nat nat)) ;
                                                DUP 5 ;
                                                CAR ;
                                                CDR ;
                                                DUP 6 ;
                                                CAR ;
                                                CAR ;
                                                GET 3 ;
                                                DIG 6 ;
                                                CDR ;
                                                SWAP ;
                                                PAIR ;
                                                SWAP ;
                                                PAIR ;
                                                CONS ;
                                                SWAP ;
                                                PAIR ;
                                                DUG 2 ;
                                                PUSH mutez 0 ;
                                                NIL (pair address (list (pair address (pair nat nat)))) ;
                                                DIG 4 ;
                                                CONS ;
                                                TRANSFER_TOKENS ;
                                                CONS } ;
                                            PAIR }
                                          { DUP ;
                                            CAR ;
                                            CAR ;
                                            CONTRACT %withdrawProfit address ;
                                            IF_NONE
                                              { DROP ; NIL operation ; PAIR }
                                              { DIG 2 ;
                                                NIL operation ;
                                                DIG 2 ;
                                                PUSH mutez 0 ;
                                                DIG 4 ;
                                                CDR ;
                                                TRANSFER_TOKENS ;
                                                CONS ;
                                                PAIR } } } } ;
                             PAIR ;
                             DUP ;
                             CDR ;
                             DUG 2 ;
                             CAR ;
                             CONS ;
                             PAIR }
                           { SWAP ; PAIR } ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         PUSH nat 0 ;
                         DUP 5 ;
                         CAR ;
                         COMPARE ;
                         GT ;
                         IF { DIG 5 ;
                              DIG 6 ;
                              PAIR ;
                              DIG 9 ;
                              SWAP ;
                              EXEC ;
                              PUSH nat 0 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              COMPARE ;
                              GT ;
                              IF { DUP 4 ;
                                   SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   SENDER ;
                                   PAIR ;
                                   PAIR ;
                                   DIG 10 ;
                                   SWAP ;
                                   EXEC ;
                                   DUP 5 ;
                                   DIG 2 ;
                                   DIG 5 ;
                                   GET 9 ;
                                   ADD ;
                                   UPDATE 9 ;
                                   DIG 3 ;
                                   DIG 2 ;
                                   CONS ;
                                   SWAP ;
                                   PAIR }
                                 { DROP ; DIG 8 ; DROP ; SWAP ; DIG 2 ; PAIR } }
                            { DIG 5 ;
                              DROP ;
                              DIG 5 ;
                              DROP ;
                              DIG 8 ;
                              DROP ;
                              DIG 8 ;
                              DROP ;
                              SWAP ;
                              DIG 2 ;
                              PAIR } ;
                         DUP ;
                         CAR ;
                         DUP 5 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         PAIR ;
                         DUP 4 ;
                         SENDER ;
                         PAIR ;
                         PAIR ;
                         DIG 10 ;
                         SWAP ;
                         EXEC ;
                         DUP 5 ;
                         DUP 7 ;
                         DIG 6 ;
                         CAR ;
                         ADD ;
                         UPDATE 1 ;
                         DUP ;
                         DIG 10 ;
                         DUP 5 ;
                         GET 13 ;
                         DIG 3 ;
                         CAR ;
                         MUL ;
                         EDIV ;
                         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                         CAR ;
                         UPDATE 3 ;
                         DUP 3 ;
                         DIG 6 ;
                         DIG 4 ;
                         GET 3 ;
                         ADD ;
                         UPDATE 3 ;
                         DIG 4 ;
                         DIG 2 ;
                         PAIR ;
                         SWAP ;
                         DIG 3 ;
                         CDR ;
                         DIG 3 ;
                         CONS ;
                         PAIR ;
                         PAIR ;
                         DIG 3 ;
                         DUP ;
                         GET 3 ;
                         DUP 3 ;
                         CAR ;
                         CDR ;
                         DIG 5 ;
                         CAR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         DUP ;
                         GET 7 ;
                         DUP 3 ;
                         CDR ;
                         CAR ;
                         DUP 5 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 7 ;
                         DUP ;
                         GET 9 ;
                         DUP 3 ;
                         CDR ;
                         CDR ;
                         DIG 4 ;
                         CDR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 9 ;
                         SWAP ;
                         CAR ;
                         CAR ;
                         PAIR }
                       { DIG 2 ;
                         DROP ;
                         DIG 3 ;
                         DROP ;
                         DIG 3 ;
                         DROP ;
                         DIG 4 ;
                         DROP ;
                         DIG 5 ;
                         DROP ;
                         DIG 5 ;
                         DROP ;
                         SENDER ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         PAIR ;
                         DUP 3 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         DUP 5 ;
                         DUP 4 ;
                         PAIR ;
                         DIG 8 ;
                         SWAP ;
                         EXEC ;
                         DUP 3 ;
                         DUP 3 ;
                         PAIR ;
                         DIG 7 ;
                         SWAP ;
                         EXEC ;
                         PUSH nat 0 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         COMPARE ;
                         LE ;
                         IF { PUSH string "INSUFFICIENT_FUNDS" ; FAILWITH } {} ;
                         NOW ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 4 ;
                         COMPARE ;
                         GT ;
                         IF { PUSH string "LOCKED_FUNDS" ; FAILWITH } {} ;
                         DIG 3 ;
                         DIG 3 ;
                         PAIR ;
                         DIG 6 ;
                         SWAP ;
                         EXEC ;
                         CONTRACT %withdrawal
                           (pair (pair (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                                       address)
                                 nat) ;
                         IF_NONE { PUSH string "CANNOT_INVOKE_VAULT_WITHDRAWAL" ; FAILWITH } {} ;
                         PUSH mutez 0 ;
                         DUP 3 ;
                         CAR ;
                         SENDER ;
                         DUP 6 ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         TRANSFER_TOKENS ;
                         DUP 3 ;
                         DIG 2 ;
                         CAR ;
                         DIG 3 ;
                         GET 3 ;
                         SUB ;
                         ABS ;
                         UPDATE 3 ;
                         NIL operation ;
                         DIG 2 ;
                         CONS ;
                         PAIR ;
                         DIG 3 ;
                         DUP ;
                         GET 3 ;
                         DUP 3 ;
                         CDR ;
                         DIG 5 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         DUP ;
                         GET 7 ;
                         DIG 3 ;
                         NONE (pair nat (pair nat timestamp)) ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 7 ;
                         SWAP ;
                         CAR ;
                         PAIR } } }
               { DIG 6 ;
                 DROP ;
                 DIG 6 ;
                 DROP ;
                 DIG 9 ;
                 DROP ;
                 IF_LEFT
                   { IF_LEFT
                       { DIG 8 ;
                         DROP ;
                         DIG 8 ;
                         DROP ;
                         SENDER ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         PAIR ;
                         DUP 3 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         DUP 5 ;
                         DUP 4 ;
                         PAIR ;
                         DIG 10 ;
                         SWAP ;
                         EXEC ;
                         NOW ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 17 ;
                         COMPARE ;
                         GT ;
                         IF { PUSH string "NOT_TIME_TO_HARVEST" ; FAILWITH } {} ;
                         DUP ;
                         GET 7 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 9 ;
                         COMPARE ;
                         GE ;
                         IF { PUSH string "HARVEST_COMPLETE" ; FAILWITH } {} ;
                         DUP 3 ;
                         DUP 3 ;
                         PAIR ;
                         DIG 8 ;
                         SWAP ;
                         EXEC ;
                         SWAP ;
                         DIG 9 ;
                         SWAP ;
                         EXEC ;
                         NIL operation ;
                         PUSH nat 0 ;
                         DUP 4 ;
                         CAR ;
                         COMPARE ;
                         GT ;
                         IF { DIG 4 ;
                              DIG 4 ;
                              PAIR ;
                              DIG 7 ;
                              SWAP ;
                              EXEC ;
                              PUSH nat 0 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              COMPARE ;
                              GT ;
                              IF { DUP 3 ;
                                   SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   SENDER ;
                                   PAIR ;
                                   PAIR ;
                                   DIG 8 ;
                                   SWAP ;
                                   EXEC ;
                                   DUP 4 ;
                                   DIG 2 ;
                                   DIG 4 ;
                                   GET 9 ;
                                   ADD ;
                                   UPDATE 9 ;
                                   DUG 2 ;
                                   CONS ;
                                   SWAP ;
                                   PAIR }
                                 { DROP ; DIG 6 ; DROP ; SWAP ; PAIR } }
                            { DIG 3 ; DROP ; DIG 3 ; DROP ; DIG 6 ; DROP ; DIG 6 ; DROP ; SWAP ; PAIR } ;
                         DUP ;
                         CAR ;
                         DUP 3 ;
                         DIG 7 ;
                         DUP 3 ;
                         GET 13 ;
                         DIG 5 ;
                         CAR ;
                         MUL ;
                         EDIV ;
                         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                         CAR ;
                         UPDATE 3 ;
                         SWAP ;
                         DIG 2 ;
                         CDR ;
                         PAIR ;
                         PAIR ;
                         DIG 3 ;
                         DUP ;
                         GET 3 ;
                         DUP 3 ;
                         CAR ;
                         CDR ;
                         DIG 5 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         DUP ;
                         GET 7 ;
                         DUP 3 ;
                         CDR ;
                         DIG 4 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 7 ;
                         SWAP ;
                         CAR ;
                         CAR ;
                         PAIR }
                       { DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 11 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         GET 16 ;
                         DIG 2 ;
                         PUSH bool False ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 16 ;
                         SWAP ;
                         PAIR } }
                   { DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 3 ;
                     DROP ;
                     DIG 4 ;
                     DROP ;
                     IF_LEFT
                       { DIG 4 ;
                         DROP ;
                         SENDER ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         PAIR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DUP 4 ;
                         DIG 2 ;
                         PAIR ;
                         DIG 5 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         GET 24 ;
                         DIG 6 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         DUP ;
                         GET 7 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 9 ;
                         COMPARE ;
                         GE ;
                         IF { PUSH string "REWARD_DRAINED" ; FAILWITH } {} ;
                         DUP ;
                         GET 9 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 7 ;
                         SUB ;
                         ABS ;
                         SWAP ;
                         DUP ;
                         GET 7 ;
                         UPDATE 9 ;
                         DUP ;
                         NIL operation ;
                         DIG 2 ;
                         DIG 3 ;
                         DIG 4 ;
                         PAIR ;
                         PAIR ;
                         DIG 5 ;
                         SWAP ;
                         EXEC ;
                         CONS ;
                         PAIR ;
                         DIG 2 ;
                         DUP ;
                         GET 3 ;
                         DUP 3 ;
                         CDR ;
                         DIG 4 ;
                         CAR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         SWAP ;
                         CAR ;
                         PAIR }
                       { DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 11 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         UPDATE 11 ;
                         SWAP ;
                         PAIR } } } }
           { DIG 7 ;
             DROP ;
             DIG 10 ;
             DROP ;
             IF_LEFT
               { IF_LEFT
                   { DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 3 ;
                     DROP ;
                     IF_LEFT
                       { SENDER ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         PAIR ;
                         DIG 2 ;
                         DUP ;
                         DUP ;
                         DUG 4 ;
                         GET 3 ;
                         DUP 4 ;
                         CDR ;
                         DIG 5 ;
                         DIG 4 ;
                         PAIR ;
                         DIG 5 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         GET 24 ;
                         DIG 7 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         SWAP ;
                         UPDATE 24 ;
                         DIG 3 ;
                         CAR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         SWAP ;
                         PAIR }
                       { DIG 2 ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 11 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         UPDATE 15 ;
                         SWAP ;
                         PAIR } }
                   { IF_LEFT
                       { DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 11 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         UPDATE 13 ;
                         SWAP ;
                         PAIR }
                       { DIG 9 ;
                         DROP ;
                         DIG 9 ;
                         DROP ;
                         SENDER ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         PAIR ;
                         DUP 3 ;
                         DUP 3 ;
                         CDR ;
                         PAIR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         DUP 5 ;
                         DUP 4 ;
                         PAIR ;
                         DIG 11 ;
                         SWAP ;
                         EXEC ;
                         DIG 2 ;
                         UNPAIR ;
                         PUSH nat 0 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         COMPARE ;
                         LE ;
                         IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                         DUP 3 ;
                         GET 3 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         COMPARE ;
                         GT ;
                         IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         DUP 5 ;
                         PAIR ;
                         DIG 9 ;
                         SWAP ;
                         EXEC ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         COMPARE ;
                         LT ;
                         IF { PUSH string "INSUFFICIENT_FUNDS" ; FAILWITH } {} ;
                         NOW ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 4 ;
                         COMPARE ;
                         GT ;
                         IF { PUSH string "LOCKED_FUNDS" ; FAILWITH } {} ;
                         DUP 3 ;
                         DUP 6 ;
                         PAIR ;
                         DIG 12 ;
                         SWAP ;
                         EXEC ;
                         DIG 4 ;
                         DIG 11 ;
                         SWAP ;
                         EXEC ;
                         NIL operation ;
                         PUSH nat 0 ;
                         DUP 5 ;
                         CAR ;
                         COMPARE ;
                         GT ;
                         IF { DIG 5 ;
                              DIG 6 ;
                              PAIR ;
                              DIG 9 ;
                              SWAP ;
                              EXEC ;
                              PUSH nat 0 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              COMPARE ;
                              GT ;
                              IF { DUP 3 ;
                                   SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   SENDER ;
                                   PAIR ;
                                   PAIR ;
                                   DIG 10 ;
                                   SWAP ;
                                   EXEC ;
                                   DUP 4 ;
                                   DIG 2 ;
                                   DIG 4 ;
                                   GET 9 ;
                                   ADD ;
                                   UPDATE 9 ;
                                   DUG 2 ;
                                   CONS ;
                                   SWAP ;
                                   PAIR }
                                 { DROP ; DIG 8 ; DROP ; SWAP ; PAIR } }
                            { DIG 5 ; DROP ; DIG 5 ; DROP ; DIG 8 ; DROP ; DIG 8 ; DROP ; SWAP ; PAIR } ;
                         DUP ;
                         CAR ;
                         DUP 3 ;
                         CONTRACT %withdrawal
                           (pair (pair (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                                       address)
                                 nat) ;
                         IF_NONE { PUSH string "CANNOT_INVOKE_VAULT_WITHDRAWAL" ; FAILWITH } {} ;
                         PUSH mutez 0 ;
                         DUP 7 ;
                         SENDER ;
                         DUP 5 ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         TRANSFER_TOKENS ;
                         DIG 3 ;
                         CONTRACT %withdrawalProfit
                           (pair (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                                 address) ;
                         IF_NONE
                           { PUSH string "CANNOT_INVOKE_VAULT_WITHDRAWAL_PROFIT" ; FAILWITH }
                           {} ;
                         PUSH mutez 0 ;
                         SENDER ;
                         DUP 5 ;
                         CAR ;
                         PAIR ;
                         TRANSFER_TOKENS ;
                         DUP 5 ;
                         DUP 7 ;
                         DIG 6 ;
                         CAR ;
                         SUB ;
                         ABS ;
                         UPDATE 1 ;
                         DUP ;
                         DIG 10 ;
                         DUP 6 ;
                         GET 13 ;
                         DIG 3 ;
                         CAR ;
                         MUL ;
                         EDIV ;
                         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                         CAR ;
                         UPDATE 3 ;
                         DUP 4 ;
                         DIG 6 ;
                         DIG 5 ;
                         GET 3 ;
                         SUB ;
                         ABS ;
                         UPDATE 3 ;
                         DIG 4 ;
                         CDR ;
                         DIG 4 ;
                         CONS ;
                         DIG 3 ;
                         CONS ;
                         PAIR ;
                         PAIR ;
                         DIG 3 ;
                         DUP ;
                         GET 3 ;
                         DUP 3 ;
                         CAR ;
                         CDR ;
                         DIG 5 ;
                         CAR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 3 ;
                         DUP ;
                         GET 7 ;
                         DUP 3 ;
                         CDR ;
                         DIG 4 ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 7 ;
                         SWAP ;
                         CAR ;
                         CAR ;
                         PAIR } } }
               { DIG 2 ;
                 DROP ;
                 DIG 3 ;
                 DROP ;
                 DIG 3 ;
                 DROP ;
                 DIG 5 ;
                 DROP ;
                 DIG 5 ;
                 DROP ;
                 DIG 5 ;
                 DROP ;
                 SENDER ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUP ;
                 DUG 3 ;
                 DUP 3 ;
                 DIG 4 ;
                 DIG 4 ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 DUP 3 ;
                 DUP 3 ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 PUSH nat 0 ;
                 SWAP ;
                 CAR ;
                 COMPARE ;
                 LE ;
                 IF { PUSH string "INSUFFICIENT_DEPOSITS" ; FAILWITH } {} ;
                 DUG 2 ;
                 PAIR ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 CONTRACT %withdrawalProfit
                   (pair (pair (address %address) (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                         address) ;
                 IF_NONE
                   { PUSH string "CANNOT_INVOKE_VAULT_WITHDRAWAL_PROFIT" ; FAILWITH }
                   {} ;
                 NIL operation ;
                 SWAP ;
                 PUSH mutez 0 ;
                 SENDER ;
                 DIG 4 ;
                 CAR ;
                 PAIR ;
                 TRANSFER_TOKENS ;
                 CONS ;
                 PAIR } } } }
