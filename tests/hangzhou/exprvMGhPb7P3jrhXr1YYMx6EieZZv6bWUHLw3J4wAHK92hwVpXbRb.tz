{ parameter
    (or (or (list %addAccessHashes bytes) (int %claim))
        (or (unit %close) (timestamp %postpone))) ;
  storage
    (pair (pair (address %admin) (pair (timestamp %deadline) (address %owner)))
          (pair (mutez %rewardAmount)
                (pair (big_map %rewardedHashes bytes bool) (big_map %users address bool)))) ;
  code { UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET 4 ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF { PUSH bool True }
                    { SWAP ; DUP ; DUG 2 ; CAR ; CAR ; SENDER ; COMPARE ; EQ } ;
                 IF {}
                    { PUSH string
                           "WrongCondition: (sp.sender == self.data.owner) | (sp.sender == self.data.admin)" ;
                      FAILWITH } ;
                 DUP ;
                 ITER { DUP 3 ;
                        GET 5 ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        MEM ;
                        IF { PUSH string "WrongCondition: ~ (self.data.rewardedHashes.contains(accessHash))" ;
                             FAILWITH }
                           {} ;
                        DIG 2 ;
                        DUP ;
                        GET 5 ;
                        PUSH (option bool) (Some False) ;
                        DIG 3 ;
                        UPDATE ;
                        UPDATE 5 ;
                        SWAP } ;
                 DROP ;
                 NIL operation }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET 3 ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 IF {}
                    { PUSH string "WrongCondition: sp.now < self.data.deadline" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 6 ;
                 SENDER ;
                 MEM ;
                 IF { PUSH string "WrongCondition: ~ (self.data.users.contains(sp.sender))" ;
                      FAILWITH }
                    {} ;
                 SOURCE ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "WrongCondition: sp.sender == sp.source" ; FAILWITH } ;
                 PUSH bool False ;
                 DUP 3 ;
                 GET 5 ;
                 DUP 3 ;
                 PACK ;
                 BLAKE2B ;
                 GET ;
                 { IF_NONE { PUSH int 40 ; FAILWITH } {} } ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string
                           "WrongCondition: self.data.rewardedHashes[sp.blake2b(sp.pack(params))] == False" ;
                      FAILWITH } ;
                 SWAP ;
                 DUP ;
                 GET 5 ;
                 PUSH (option bool) (Some True) ;
                 DIG 3 ;
                 PACK ;
                 BLAKE2B ;
                 UPDATE ;
                 UPDATE 5 ;
                 DUP ;
                 GET 6 ;
                 PUSH (option bool) (Some True) ;
                 SENDER ;
                 UPDATE ;
                 UPDATE 6 ;
                 NIL operation ;
                 SENDER ;
                 CONTRACT unit ;
                 { IF_NONE { PUSH int 43 ; FAILWITH } {} } ;
                 DUP 3 ;
                 GET 3 ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 CONS } }
           { IF_LEFT
               { DROP ;
                 DUP ;
                 CAR ;
                 GET 4 ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string "WrongCondition: sp.sender == self.data.owner" ; FAILWITH } ;
                 DUP ;
                 CAR ;
                 GET 3 ;
                 NOW ;
                 COMPARE ;
                 GT ;
                 IF {}
                    { PUSH string "WrongCondition: sp.now > self.data.deadline" ; FAILWITH } ;
                 NIL operation ;
                 SENDER ;
                 CONTRACT unit ;
                 { IF_NONE { PUSH int 31 ; FAILWITH } {} } ;
                 BALANCE ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 CONS }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET 4 ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF { PUSH bool True }
                    { SWAP ; DUP ; DUG 2 ; CAR ; CAR ; SENDER ; COMPARE ; EQ } ;
                 IF {}
                    { PUSH string
                           "WrongCondition: (sp.sender == self.data.owner) | (sp.sender == self.data.admin)" ;
                      FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET 3 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 GT ;
                 IF {}
                    { PUSH string "WrongCondition: params > self.data.deadline" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET 3 ;
                 PUSH int 604800 ;
                 ADD ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 LT ;
                 IF {}
                    { PUSH string "WrongCondition: params < sp.add_seconds(self.data.deadline, 604800)" ;
                      FAILWITH } ;
                 SWAP ;
                 UNPAIR ;
                 UNPAIR ;
                 SWAP ;
                 CDR ;
                 DIG 3 ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 NIL operation } } ;
         PAIR } }
