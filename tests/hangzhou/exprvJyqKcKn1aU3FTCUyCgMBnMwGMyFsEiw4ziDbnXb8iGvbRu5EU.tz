{ parameter
    (or (or (unit %default) (set %distribute address))
        (or (timestamp %updateLock) (address %withdraw))) ;
  storage
    (pair (big_map %metadata string bytes)
          (pair (pair %sale
                   (pair %token (address %address) (nat %tokenId))
                   (pair (nat %tokenDec)
                         (pair (mutez %price)
                               (pair (nat %soldAmount)
                                     (pair (nat %saleSupply)
                                           (pair (nat %minAmount)
                                                 (pair (nat %maxAmount)
                                                       (pair (timestamp %startTime)
                                                             (pair (timestamp %endTime) (pair (timestamp %lockEndTime) (nat %lockFactor)))))))))))
                (pair (big_map %ledger address (pair (nat %amount) (nat %amountLocked)))
                      (address %admin)))) ;
  code { LAMBDA
           (pair address
                 (pair (big_map string bytes)
                       (pair (pair (pair address nat)
                                   (pair nat
                                         (pair mutez
                                               (pair nat
                                                     (pair nat (pair nat (pair nat (pair timestamp (pair timestamp (pair timestamp nat))))))))))
                             (pair (big_map address (pair nat nat)) address))))
           (pair nat nat)
           { UNPAIR ;
             SWAP ;
             GET 5 ;
             SWAP ;
             GET ;
             IF_NONE { PUSH nat 0 ; PUSH nat 0 ; SWAP ; PAIR } {} } ;
         LAMBDA
           (pair address mutez)
           operation
           { UNPAIR ;
             CONTRACT unit ;
             IF_NONE { PUSH string "INVALID_DESTINATION" ; FAILWITH } {} ;
             SWAP ;
             UNIT ;
             TRANSFER_TOKENS } ;
         DIG 2 ;
         UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { DROP ;
                 DUP ;
                 GET 3 ;
                 GET 15 ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 IF { PUSH string "SALE_NOT_STARTED" ; FAILWITH } {} ;
                 DUP ;
                 GET 3 ;
                 GET 17 ;
                 NOW ;
                 COMPARE ;
                 GT ;
                 IF { PUSH string "SALE_ENDED" ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 AMOUNT ;
                 COMPARE ;
                 LE ;
                 IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                 DUP ;
                 GET 3 ;
                 GET 9 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 GET 7 ;
                 COMPARE ;
                 GE ;
                 IF { PUSH string "SOLD_OUT" ; FAILWITH } {} ;
                 PUSH nat 1000000 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 GET 3 ;
                 DUP 3 ;
                 GET 3 ;
                 GET 5 ;
                 PUSH nat 1000000 ;
                 AMOUNT ;
                 MUL ;
                 EDIV ;
                 IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                 CAR ;
                 MUL ;
                 EDIV ;
                 IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 GET 9 ;
                 DUP 3 ;
                 GET 3 ;
                 GET 7 ;
                 DUP 3 ;
                 ADD ;
                 COMPARE ;
                 GT ;
                 IF { DROP ;
                      DUP ;
                      GET 3 ;
                      GET 7 ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      GET 3 ;
                      GET 9 ;
                      SUB ;
                      ABS ;
                      PUSH nat 1000000 ;
                      DUP 3 ;
                      GET 3 ;
                      GET 5 ;
                      DUP 4 ;
                      GET 3 ;
                      GET 3 ;
                      PUSH nat 1000000 ;
                      DUP 5 ;
                      MUL ;
                      EDIV ;
                      IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                      CAR ;
                      MUL ;
                      EDIV ;
                      IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                      CAR ;
                      AMOUNT ;
                      SUB ;
                      PAIR }
                    { PUSH mutez 0 ; PAIR } ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DUP 3 ;
                 SENDER ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DUP 4 ;
                 GET 3 ;
                 GET 11 ;
                 DUP 3 ;
                 DUP 3 ;
                 CAR ;
                 ADD ;
                 COMPARE ;
                 LT ;
                 IF { PUSH string "MIN_AMOUNT_NOT_MET" ; FAILWITH } {} ;
                 DUP 4 ;
                 GET 3 ;
                 GET 13 ;
                 DUP 3 ;
                 DUP 3 ;
                 CAR ;
                 ADD ;
                 COMPARE ;
                 GT ;
                 IF { PUSH string "MAX_AMOUNT_EXCEEDED" ; FAILWITH } {} ;
                 DUP ;
                 DUP 3 ;
                 DIG 2 ;
                 CAR ;
                 ADD ;
                 UPDATE 1 ;
                 DUP ;
                 PUSH nat 100 ;
                 DUP 6 ;
                 GET 3 ;
                 GET 20 ;
                 DUP 5 ;
                 MUL ;
                 EDIV ;
                 IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                 CAR ;
                 DIG 2 ;
                 CDR ;
                 ADD ;
                 UPDATE 2 ;
                 DIG 3 ;
                 DUP ;
                 DUP ;
                 DUG 5 ;
                 GET 3 ;
                 DIG 3 ;
                 DIG 5 ;
                 GET 3 ;
                 GET 7 ;
                 ADD ;
                 UPDATE 7 ;
                 UPDATE 3 ;
                 DUP ;
                 GET 5 ;
                 DIG 2 ;
                 SOME ;
                 SENDER ;
                 UPDATE ;
                 UPDATE 5 ;
                 NIL operation ;
                 PUSH mutez 0 ;
                 DUP 4 ;
                 COMPARE ;
                 GT ;
                 IF { DIG 2 ; SENDER ; PAIR ; DIG 3 ; SWAP ; EXEC ; CONS }
                    { DIG 2 ; DIG 3 ; DROP 2 } ;
                 PAIR }
               { DIG 2 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 6 ;
                 SENDER ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 GET 9 ;
                 DUP 3 ;
                 GET 3 ;
                 GET 7 ;
                 COMPARE ;
                 LT ;
                 DUP 3 ;
                 GET 3 ;
                 GET 17 ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 AND ;
                 IF { PUSH string "SALE_NOT_ENDED" ; FAILWITH } {} ;
                 NIL (pair address (pair nat nat)) ;
                 DIG 2 ;
                 PAIR ;
                 SWAP ;
                 ITER { SWAP ;
                        PAIR ;
                        DUP ;
                        CAR ;
                        CDR ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        CAR ;
                        CAR ;
                        DIG 2 ;
                        CDR ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        PAIR ;
                        DUP 5 ;
                        SWAP ;
                        EXEC ;
                        PUSH nat 0 ;
                        SWAP ;
                        CAR ;
                        COMPARE ;
                        GT ;
                        IF { SWAP ;
                             DUP ;
                             DUG 2 ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             PAIR ;
                             DUP 5 ;
                             SWAP ;
                             EXEC ;
                             DUP ;
                             DUP ;
                             DUG 2 ;
                             CAR ;
                             PAIR ;
                             DUP 4 ;
                             GET 3 ;
                             GET 19 ;
                             NOW ;
                             COMPARE ;
                             LT ;
                             IF { SWAP ;
                                  DUP ;
                                  DUG 2 ;
                                  CDR ;
                                  DIG 2 ;
                                  CAR ;
                                  SUB ;
                                  ABS ;
                                  SWAP ;
                                  CDR ;
                                  SWAP ;
                                  PAIR }
                                { SWAP ; PUSH nat 0 ; UPDATE 2 ; SWAP ; CAR ; PAIR } ;
                             DUP ;
                             CAR ;
                             SWAP ;
                             CDR ;
                             DUP ;
                             DUP 3 ;
                             DIG 2 ;
                             CAR ;
                             SUB ;
                             ABS ;
                             UPDATE 1 ;
                             DIG 4 ;
                             DUP 4 ;
                             DUP 6 ;
                             GET 3 ;
                             CAR ;
                             CDR ;
                             DIG 4 ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             CONS ;
                             DIG 3 ;
                             DUP ;
                             GET 5 ;
                             DIG 3 ;
                             DIG 4 ;
                             SWAP ;
                             SOME ;
                             SWAP ;
                             UPDATE ;
                             UPDATE 5 ;
                             PAIR }
                           { DROP ; PAIR } } ;
                 SWAP ;
                 DROP ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 CAR ;
                 SELF_ADDRESS ;
                 SWAP ;
                 CAR ;
                 CONTRACT %transfer
                   (list (pair (address %from_)
                               (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                 IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 NIL (pair address (list (pair address (pair nat nat)))) ;
                 DIG 3 ;
                 DIG 4 ;
                 SWAP ;
                 PAIR ;
                 CONS ;
                 TRANSFER_TOKENS ;
                 SWAP ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR } }
           { DIG 3 ;
             DROP ;
             IF_LEFT
               { DIG 2 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 6 ;
                 SENDER ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 GET 3 ;
                 DIG 2 ;
                 UPDATE 19 ;
                 UPDATE 3 ;
                 NIL operation ;
                 PAIR }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 6 ;
                 SENDER ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 GET 9 ;
                 DUP 3 ;
                 GET 3 ;
                 GET 7 ;
                 COMPARE ;
                 LT ;
                 DUP 3 ;
                 GET 3 ;
                 GET 17 ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 AND ;
                 IF { PUSH string "SALE_NOT_ENDED" ; FAILWITH } {} ;
                 NIL operation ;
                 PUSH mutez 0 ;
                 BALANCE ;
                 COMPARE ;
                 GT ;
                 IF { BALANCE ; DUP 3 ; PAIR ; DIG 4 ; SWAP ; EXEC ; CONS }
                    { DIG 3 ; DROP } ;
                 DUP 3 ;
                 GET 3 ;
                 GET 9 ;
                 DUP 4 ;
                 GET 3 ;
                 GET 7 ;
                 COMPARE ;
                 LT ;
                 IF { DUP 3 ;
                      GET 3 ;
                      GET 7 ;
                      DUP 4 ;
                      GET 3 ;
                      GET 9 ;
                      SUB ;
                      ABS ;
                      DUP 4 ;
                      GET 3 ;
                      CAR ;
                      PAIR ;
                      DIG 2 ;
                      SELF_ADDRESS ;
                      DIG 2 ;
                      UNPAIR ;
                      DUP ;
                      CAR ;
                      CONTRACT %transfer
                        (list (pair (address %from_)
                                    (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                      IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
                      PUSH mutez 0 ;
                      NIL (pair address (list (pair address (pair nat nat)))) ;
                      DIG 5 ;
                      NIL (pair address (pair nat nat)) ;
                      DIG 7 ;
                      DIG 6 ;
                      CDR ;
                      DIG 7 ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      CONS ;
                      SWAP ;
                      PAIR ;
                      CONS ;
                      TRANSFER_TOKENS ;
                      CONS }
                    { SWAP ; DROP } ;
                 PAIR } } } }
