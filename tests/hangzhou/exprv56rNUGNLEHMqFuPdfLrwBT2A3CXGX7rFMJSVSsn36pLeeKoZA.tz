{ parameter
    (or (or (or (nat %deposit) (unit %escape))
            (or (unit %harvest)
                (pair %initFarm
                   (pair %poolToken (address %address) (nat %tokenId))
                   (pair (pair %rewardToken (address %address) (nat %tokenId))
                         (pair (nat %rewardSupply)
                               (pair (nat %rewardPerSec)
                                     (pair (timestamp %startTime)
                                           (pair (timestamp %endTime)
                                                 (pair (int %lockDuration) (set %bonuses (pair (timestamp %endTime) (nat %multiplier))))))))))))
        (or (or (address %rescue) (address %updateOwner))
            (or (nat %withdraw) (address %withdrawProfit)))) ;
  storage
    (pair (big_map %metadata string bytes)
          (pair (pair %farm
                   (pair %poolToken (address %address) (nat %tokenId))
                   (pair (nat %poolBalance)
                         (pair (pair %rewardToken (address %address) (nat %tokenId))
                               (pair (nat %rewardSupply)
                                     (pair (nat %rewardPaid)
                                           (pair (timestamp %lastRewardTime)
                                                 (pair (nat %accRewardPerShare)
                                                       (pair (nat %rewardPerSec)
                                                             (pair (timestamp %startTime)
                                                                   (pair (timestamp %endTime)
                                                                         (pair (int %lockDuration)
                                                                               (pair (set %bonuses (pair (timestamp %endTime) (nat %multiplier))) (address %owner)))))))))))))
                (big_map %ledger
                   address
                   (pair (nat %amount) (pair (nat %rewardDebt) (timestamp %lockEndTime)))))) ;
  code { LAMBDA
           (pair (pair address address) (pair (pair address nat) nat))
           operation
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             DUP ;
             CAR ;
             CONTRACT %transfer
               (list (pair (address %from_)
                           (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
             IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
             PUSH mutez 0 ;
             NIL (pair address (list (pair address (pair nat nat)))) ;
             DIG 5 ;
             NIL (pair address (pair nat nat)) ;
             DIG 7 ;
             DIG 6 ;
             CDR ;
             DIG 7 ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             CONS ;
             SWAP ;
             PAIR ;
             CONS ;
             TRANSFER_TOKENS } ;
         PUSH nat 1000000000000000 ;
         PUSH nat 1000 ;
         LAMBDA
           (pair timestamp timestamp)
           timestamp
           { UNPAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             LT ;
             IF { SWAP ; DROP } { DROP } } ;
         LAMBDA
           (pair nat nat)
           nat
           { UNPAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             LT ;
             IF { SWAP ; DROP } { DROP } } ;
         LAMBDA
           address
           unit
           { PUSH bool False ;
             SWAP ;
             SENDER ;
             COMPARE ;
             EQ ;
             COMPARE ;
             EQ ;
             IF { PUSH string "INVALID_ACCESS" ; FAILWITH } { PUSH unit Unit } } ;
         DUP 5 ;
         DIG 4 ;
         DIG 4 ;
         DUP 5 ;
         PAIR 4 ;
         LAMBDA
           (pair (pair (lambda (pair nat nat) nat)
                       (pair (lambda (pair timestamp timestamp) timestamp) (pair nat nat)))
                 (pair (pair address nat)
                       (pair nat
                             (pair (pair address nat)
                                   (pair nat
                                         (pair nat
                                               (pair timestamp
                                                     (pair nat
                                                           (pair nat
                                                                 (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
           (pair (pair address nat)
                 (pair nat
                       (pair (pair address nat)
                             (pair nat
                                   (pair nat
                                         (pair timestamp
                                               (pair nat
                                                     (pair nat
                                                           (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address))))))))))))
           { UNPAIR ;
             UNPAIR 4 ;
             DIG 4 ;
             DUP ;
             GET 11 ;
             NOW ;
             COMPARE ;
             GT ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET 19 ;
             DUP 3 ;
             GET 11 ;
             COMPARE ;
             LT ;
             AND ;
             IF { DUP ;
                  GET 7 ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  GET 9 ;
                  COMPARE ;
                  GE ;
                  PUSH nat 0 ;
                  DUP 3 ;
                  GET 3 ;
                  COMPARE ;
                  EQ ;
                  PUSH nat 0 ;
                  DUP 4 ;
                  GET 7 ;
                  COMPARE ;
                  EQ ;
                  OR ;
                  OR ;
                  IF { SWAP ;
                       DROP ;
                       DIG 2 ;
                       DROP ;
                       DIG 2 ;
                       DROP ;
                       DUP ;
                       GET 19 ;
                       NOW ;
                       PAIR ;
                       DIG 2 ;
                       SWAP ;
                       EXEC ;
                       UPDATE 11 }
                     { NOW ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       GET 17 ;
                       COMPARE ;
                       LT ;
                       IF { DUP ;
                            GET 11 ;
                            NOW ;
                            DUP ;
                            DUP 4 ;
                            GET 19 ;
                            COMPARE ;
                            LT ;
                            IF { DROP ; SWAP ; DUP ; DUG 2 ; GET 19 } {} ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            DUP 4 ;
                            GET 23 ;
                            EMPTY_SET (pair timestamp nat) ;
                            SWAP ;
                            ITER { SWAP ;
                                   DUP 3 ;
                                   DUP 3 ;
                                   CAR ;
                                   COMPARE ;
                                   GE ;
                                   IF { SWAP ; PUSH bool True ; SWAP ; UPDATE } { SWAP ; DROP } } ;
                            SWAP ;
                            DROP ;
                            DUP 3 ;
                            DUP 3 ;
                            SUB ;
                            ABS ;
                            PUSH nat 0 ;
                            PAIR ;
                            SWAP ;
                            ITER { SWAP ;
                                   PAIR ;
                                   DUP ;
                                   CDR ;
                                   DUP ;
                                   CAR ;
                                   DUP 4 ;
                                   PAIR ;
                                   DUP 8 ;
                                   SWAP ;
                                   EXEC ;
                                   DUP 5 ;
                                   SWAP ;
                                   SUB ;
                                   ABS ;
                                   DUP 9 ;
                                   SWAP ;
                                   DUP 3 ;
                                   CDR ;
                                   MUL ;
                                   MUL ;
                                   DUP 3 ;
                                   CAR ;
                                   CAR ;
                                   ADD ;
                                   DUP 4 ;
                                   DIG 2 ;
                                   PUSH nat 0 ;
                                   DUP 3 ;
                                   DUP 3 ;
                                   CAR ;
                                   COMPARE ;
                                   LT ;
                                   IF { SWAP ; CAR ; DIG 2 ; SUB ; ABS ; ADD } { SWAP ; DROP ; SWAP ; DROP } ;
                                   DIG 2 ;
                                   CAR ;
                                   CDR ;
                                   PAIR ;
                                   DUP 6 ;
                                   SWAP ;
                                   EXEC ;
                                   SWAP ;
                                   PAIR } ;
                            SWAP ;
                            DROP ;
                            SWAP ;
                            DROP ;
                            DIG 2 ;
                            DROP ;
                            DUP 4 ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            CDR ;
                            MUL ;
                            SWAP ;
                            CAR ;
                            ADD }
                          { SWAP ; DROP ; PUSH nat 0 } ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       GET 3 ;
                       DIG 4 ;
                       DIG 5 ;
                       DUP 5 ;
                       GET 15 ;
                       DIG 4 ;
                       MUL ;
                       MUL ;
                       EDIV ;
                       IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                       CAR ;
                       EDIV ;
                       IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                       CAR ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       SWAP ;
                       DIG 2 ;
                       GET 13 ;
                       ADD ;
                       UPDATE 13 ;
                       DUP ;
                       GET 19 ;
                       NOW ;
                       PAIR ;
                       DIG 2 ;
                       SWAP ;
                       EXEC ;
                       UPDATE 11 } }
                { SWAP ; DROP ; SWAP ; DROP ; SWAP ; DROP ; SWAP ; DROP } } ;
         SWAP ;
         APPLY ;
         DUP 5 ;
         LAMBDA
           (pair (lambda (pair (pair address address) (pair (pair address nat) nat)) operation)
                 (pair (pair address nat)
                       (pair (pair address nat)
                             (pair nat
                                   (pair (pair address nat)
                                         (pair nat
                                               (pair nat
                                                     (pair timestamp
                                                           (pair nat
                                                                 (pair nat
                                                                       (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address))))))))))))))
           operation
           { UNPAIR ;
             SWAP ;
             UNPAIR ;
             UNPAIR ;
             SWAP ;
             DIG 2 ;
             GET 5 ;
             PAIR ;
             SWAP ;
             SELF_ADDRESS ;
             PAIR ;
             PAIR ;
             EXEC } ;
         SWAP ;
         APPLY ;
         LAMBDA
           (pair address
                 (pair (big_map string bytes)
                       (pair (pair (pair address nat)
                                   (pair nat
                                         (pair (pair address nat)
                                               (pair nat
                                                     (pair nat
                                                           (pair timestamp
                                                                 (pair nat
                                                                       (pair nat
                                                                             (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address))))))))))))
                             (big_map address (pair nat (pair nat timestamp))))))
           (pair nat (pair nat timestamp))
           { UNPAIR ;
             PUSH nat 0 ;
             PUSH nat 0 ;
             DUP 4 ;
             GET 3 ;
             GET 21 ;
             NOW ;
             ADD ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             DIG 2 ;
             GET 4 ;
             DIG 2 ;
             GET ;
             IF_NONE {} { SWAP ; DROP } } ;
         DUP 6 ;
         DIG 5 ;
         DUP 5 ;
         DUP 4 ;
         PAIR 4 ;
         LAMBDA
           (pair (pair (lambda
                          (pair address
                                (pair (big_map string bytes)
                                      (pair (pair (pair address nat)
                                                  (pair nat
                                                        (pair (pair address nat)
                                                              (pair nat
                                                                    (pair nat
                                                                          (pair timestamp
                                                                                (pair nat
                                                                                      (pair nat
                                                                                            (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address))))))))))))
                                            (big_map address (pair nat (pair nat timestamp))))))
                          (pair nat (pair nat timestamp)))
                       (pair (lambda
                                (pair (pair address nat)
                                      (pair nat
                                            (pair (pair address nat)
                                                  (pair nat
                                                        (pair nat
                                                              (pair timestamp
                                                                    (pair nat
                                                                          (pair nat
                                                                                (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address))))))))))))
                                (pair (pair address nat)
                                      (pair nat
                                            (pair (pair address nat)
                                                  (pair nat
                                                        (pair nat
                                                              (pair timestamp
                                                                    (pair nat
                                                                          (pair nat
                                                                                (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address)))))))))))))
                             (pair (lambda (pair nat nat) nat) nat)))
                 (pair address
                       (pair (big_map string bytes)
                             (pair (pair (pair address nat)
                                         (pair nat
                                               (pair (pair address nat)
                                                     (pair nat
                                                           (pair nat
                                                                 (pair timestamp
                                                                       (pair nat
                                                                             (pair nat
                                                                                   (pair timestamp (pair timestamp (pair int (pair (set (pair timestamp nat)) address))))))))))))
                                   (big_map address (pair nat (pair nat timestamp)))))))
           nat
           { UNPAIR ;
             UNPAIR 4 ;
             DIG 4 ;
             UNPAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET 3 ;
             DIG 4 ;
             SWAP ;
             EXEC ;
             DUG 2 ;
             PAIR ;
             DIG 2 ;
             SWAP ;
             EXEC ;
             DIG 3 ;
             DUP 3 ;
             GET 13 ;
             DUP 3 ;
             CAR ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET 3 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             GT ;
             DUP 4 ;
             GET 7 ;
             DUP 5 ;
             GET 9 ;
             COMPARE ;
             LT ;
             AND ;
             IF { DUP 3 ;
                  GET 9 ;
                  DIG 3 ;
                  GET 7 ;
                  SUB ;
                  ABS ;
                  DIG 2 ;
                  GET 3 ;
                  DIG 2 ;
                  SUB ;
                  ABS ;
                  PAIR ;
                  EXEC }
                { DROP 4 ; PUSH nat 0 } } ;
         SWAP ;
         APPLY ;
         DIG 7 ;
         UNPAIR ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         GT ;
         IF { PUSH string "INVALID_AMOUNT_TEZ_REFUSED" ; FAILWITH } {} ;
         IF_LEFT
           { DIG 6 ;
             DROP ;
             IF_LEFT
               { IF_LEFT
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     SWAP ;
                     PAIR ;
                     SENDER ;
                     DUP 3 ;
                     GET 3 ;
                     DIG 2 ;
                     UNPAIR ;
                     PUSH nat 0 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     COMPARE ;
                     LE ;
                     IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                     NOW ;
                     DUP 4 ;
                     GET 19 ;
                     COMPARE ;
                     LT ;
                     IF { PUSH string "FARM_ENDED" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     DUP 5 ;
                     PAIR ;
                     DIG 7 ;
                     SWAP ;
                     EXEC ;
                     DIG 3 ;
                     DIG 8 ;
                     SWAP ;
                     EXEC ;
                     NIL operation ;
                     PUSH nat 0 ;
                     DUP 4 ;
                     CAR ;
                     COMPARE ;
                     GT ;
                     IF { DIG 4 ;
                          DIG 5 ;
                          PAIR ;
                          DIG 6 ;
                          SWAP ;
                          EXEC ;
                          PUSH nat 0 ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          COMPARE ;
                          GT ;
                          IF { DUP 3 ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               SENDER ;
                               PAIR ;
                               PAIR ;
                               DIG 7 ;
                               SWAP ;
                               EXEC ;
                               DUP 4 ;
                               DIG 2 ;
                               DIG 4 ;
                               GET 9 ;
                               ADD ;
                               UPDATE 9 ;
                               DUG 2 ;
                               CONS ;
                               SWAP ;
                               PAIR }
                             { DROP ; DIG 5 ; DROP ; SWAP ; PAIR } }
                        { DIG 4 ; DROP ; DIG 4 ; DROP ; DIG 5 ; DROP ; DIG 5 ; DROP ; SWAP ; PAIR } ;
                     DUP ;
                     CAR ;
                     DUP 4 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     PAIR ;
                     SELF_ADDRESS ;
                     SENDER ;
                     PAIR ;
                     PAIR ;
                     DIG 7 ;
                     SWAP ;
                     EXEC ;
                     DUP 4 ;
                     DUP 6 ;
                     DIG 5 ;
                     CAR ;
                     ADD ;
                     UPDATE 1 ;
                     DUP ;
                     DIG 7 ;
                     DUP 5 ;
                     GET 13 ;
                     DIG 3 ;
                     CAR ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     UPDATE 3 ;
                     DUP 3 ;
                     DIG 5 ;
                     DIG 4 ;
                     GET 3 ;
                     ADD ;
                     UPDATE 3 ;
                     DIG 3 ;
                     CDR ;
                     DIG 3 ;
                     CONS ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     UPDATE 3 ;
                     DUP ;
                     GET 4 ;
                     DUP 3 ;
                     CDR ;
                     SOME ;
                     SENDER ;
                     UPDATE ;
                     UPDATE 4 ;
                     SWAP ;
                     CAR ;
                     CAR ;
                     PAIR }
                   { DROP ;
                     SWAP ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     SENDER ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     DUP 3 ;
                     GET 3 ;
                     PUSH nat 0 ;
                     DUP 3 ;
                     CAR ;
                     COMPARE ;
                     LE ;
                     IF { PUSH string "INSUFFICIENT_FUNDS" ; FAILWITH } {} ;
                     NOW ;
                     DUP 3 ;
                     GET 4 ;
                     COMPARE ;
                     GT ;
                     IF { PUSH string "LOCKED_FUNDS" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     PAIR ;
                     SENDER ;
                     SELF_ADDRESS ;
                     PAIR ;
                     PAIR ;
                     DIG 5 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     DIG 3 ;
                     CAR ;
                     DIG 3 ;
                     GET 3 ;
                     SUB ;
                     ABS ;
                     UPDATE 3 ;
                     NIL operation ;
                     DIG 2 ;
                     CONS ;
                     PAIR ;
                     DIG 2 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     UPDATE 3 ;
                     DUP ;
                     GET 4 ;
                     DIG 3 ;
                     NONE (pair nat (pair nat timestamp)) ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 4 ;
                     SWAP ;
                     CAR ;
                     PAIR } }
               { IF_LEFT
                   { DROP ;
                     DIG 6 ;
                     DROP ;
                     DUP ;
                     SENDER ;
                     DUP 3 ;
                     GET 3 ;
                     NOW ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 17 ;
                     COMPARE ;
                     GT ;
                     IF { PUSH string "NOT_TIME_TO_HARVEST" ; FAILWITH } {} ;
                     DUP ;
                     GET 7 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 9 ;
                     COMPARE ;
                     GE ;
                     IF { PUSH string "HARVEST_COMPLETE" ; FAILWITH } {} ;
                     DUP 3 ;
                     DUP 3 ;
                     PAIR ;
                     DIG 6 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     DIG 7 ;
                     SWAP ;
                     EXEC ;
                     NIL operation ;
                     PUSH nat 0 ;
                     DUP 4 ;
                     CAR ;
                     COMPARE ;
                     GT ;
                     IF { DIG 4 ;
                          DIG 4 ;
                          PAIR ;
                          DIG 5 ;
                          SWAP ;
                          EXEC ;
                          PUSH nat 0 ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          COMPARE ;
                          GT ;
                          IF { DUP 3 ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               SENDER ;
                               PAIR ;
                               PAIR ;
                               DIG 6 ;
                               SWAP ;
                               EXEC ;
                               DUP 4 ;
                               DIG 2 ;
                               DIG 4 ;
                               GET 9 ;
                               ADD ;
                               UPDATE 9 ;
                               DUG 2 ;
                               CONS ;
                               SWAP ;
                               PAIR }
                             { DROP ; DIG 4 ; DROP ; SWAP ; PAIR } }
                        { DIG 3 ; DROP ; DIG 3 ; DROP ; DIG 4 ; DROP ; DIG 4 ; DROP ; SWAP ; PAIR } ;
                     DUP ;
                     CAR ;
                     DUP 3 ;
                     DIG 5 ;
                     DUP 3 ;
                     GET 13 ;
                     DIG 5 ;
                     CAR ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     UPDATE 3 ;
                     SWAP ;
                     DIG 2 ;
                     CDR ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     UPDATE 3 ;
                     DUP ;
                     GET 4 ;
                     DUP 3 ;
                     CDR ;
                     SOME ;
                     SENDER ;
                     UPDATE ;
                     UPDATE 4 ;
                     SWAP ;
                     CAR ;
                     CAR ;
                     PAIR }
                   { DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     SENDER ;
                     DUP 3 ;
                     GET 3 ;
                     GET 24 ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                     NOW ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 9 ;
                     COMPARE ;
                     LT ;
                     IF { PUSH string "INVALID_START_TIME" ; FAILWITH } {} ;
                     DUP ;
                     GET 9 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 11 ;
                     COMPARE ;
                     LE ;
                     IF { PUSH string "INVALID_END_TIME" ; FAILWITH } {} ;
                     DUP ;
                     GET 14 ;
                     ITER { SWAP ;
                            DUP ;
                            DUG 2 ;
                            GET 9 ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            CAR ;
                            COMPARE ;
                            LE ;
                            IF { PUSH string "INVALID_BONUS_END_TIME" ; FAILWITH } {} ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            GET 11 ;
                            SWAP ;
                            CAR ;
                            COMPARE ;
                            GT ;
                            IF { PUSH string "INVALID_BONUS_END_TIME" ; FAILWITH } {} } ;
                     SWAP ;
                     DUP ;
                     GET 3 ;
                     DUP 3 ;
                     CAR ;
                     UPDATE 1 ;
                     UPDATE 3 ;
                     DUP ;
                     GET 3 ;
                     PUSH nat 0 ;
                     UPDATE 3 ;
                     UPDATE 3 ;
                     DUP ;
                     GET 3 ;
                     DUP 3 ;
                     GET 3 ;
                     UPDATE 5 ;
                     UPDATE 3 ;
                     DUP ;
                     GET 3 ;
                     DUP 3 ;
                     GET 5 ;
                     UPDATE 7 ;
                     UPDATE 3 ;
                     DUP ;
                     GET 3 ;
                     PUSH nat 0 ;
                     UPDATE 9 ;
                     UPDATE 3 ;
                     DUP ;
                     GET 3 ;
                     DUP 3 ;
                     GET 9 ;
                     UPDATE 11 ;
                     UPDATE 3 ;
                     DUP ;
                     GET 3 ;
                     PUSH nat 0 ;
                     UPDATE 13 ;
                     UPDATE 3 ;
                     DUP ;
                     GET 3 ;
                     DUP 3 ;
                     GET 7 ;
                     UPDATE 15 ;
                     UPDATE 3 ;
                     DUP ;
                     GET 3 ;
                     DUP 3 ;
                     GET 9 ;
                     UPDATE 17 ;
                     UPDATE 3 ;
                     DUP ;
                     GET 3 ;
                     DUP 3 ;
                     GET 11 ;
                     UPDATE 19 ;
                     UPDATE 3 ;
                     DUP ;
                     GET 3 ;
                     DUP 3 ;
                     GET 13 ;
                     UPDATE 21 ;
                     UPDATE 3 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 5 ;
                     DUP 3 ;
                     GET 3 ;
                     PAIR ;
                     SELF_ADDRESS ;
                     SENDER ;
                     PAIR ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     DUP ;
                     GET 3 ;
                     DIG 3 ;
                     GET 14 ;
                     UPDATE 23 ;
                     UPDATE 3 ;
                     NIL operation ;
                     DIG 2 ;
                     CONS ;
                     PAIR } } }
           { IF_LEFT
               { DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 3 ;
                 DROP ;
                 DIG 4 ;
                 DROP ;
                 DIG 4 ;
                 DROP ;
                 IF_LEFT
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     DUP ;
                     GET 24 ;
                     DIG 5 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP ;
                     GET 7 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 9 ;
                     COMPARE ;
                     GE ;
                     IF { PUSH string "REWARD_DRAINED" ; FAILWITH } {} ;
                     DUP ;
                     GET 9 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 7 ;
                     SUB ;
                     ABS ;
                     SWAP ;
                     DUP ;
                     GET 7 ;
                     UPDATE 9 ;
                     DUP ;
                     NIL operation ;
                     DIG 2 ;
                     DIG 3 ;
                     DIG 4 ;
                     PAIR ;
                     PAIR ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     CONS ;
                     PAIR ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     UPDATE 3 ;
                     SWAP ;
                     CAR ;
                     PAIR }
                   { DIG 2 ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     SWAP ;
                     DIG 2 ;
                     GET 3 ;
                     DUP ;
                     GET 24 ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     SWAP ;
                     UPDATE 24 ;
                     UPDATE 3 ;
                     NIL operation ;
                     PAIR } }
               { IF_LEFT
                   { DIG 6 ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     SWAP ;
                     PAIR ;
                     SENDER ;
                     DUP 3 ;
                     GET 3 ;
                     DIG 2 ;
                     UNPAIR ;
                     PUSH nat 0 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     COMPARE ;
                     LE ;
                     IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                     DUP 3 ;
                     GET 3 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     COMPARE ;
                     GT ;
                     IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     DUP 5 ;
                     PAIR ;
                     DIG 7 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     COMPARE ;
                     LT ;
                     IF { PUSH string "INSUFFICIENT_FUNDS" ; FAILWITH } {} ;
                     NOW ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 4 ;
                     COMPARE ;
                     GT ;
                     IF { PUSH string "LOCKED_FUNDS" ; FAILWITH } {} ;
                     DIG 3 ;
                     DIG 8 ;
                     SWAP ;
                     EXEC ;
                     NIL operation ;
                     PUSH nat 0 ;
                     DUP 4 ;
                     CAR ;
                     COMPARE ;
                     GT ;
                     IF { DIG 4 ;
                          DIG 5 ;
                          PAIR ;
                          DIG 6 ;
                          SWAP ;
                          EXEC ;
                          PUSH nat 0 ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          COMPARE ;
                          GT ;
                          IF { DUP 3 ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               SENDER ;
                               PAIR ;
                               PAIR ;
                               DIG 7 ;
                               SWAP ;
                               EXEC ;
                               DUP 4 ;
                               DIG 2 ;
                               DIG 4 ;
                               GET 9 ;
                               ADD ;
                               UPDATE 9 ;
                               DUG 2 ;
                               CONS ;
                               SWAP ;
                               PAIR }
                             { DROP ; DIG 5 ; DROP ; SWAP ; PAIR } }
                        { DIG 4 ; DROP ; DIG 4 ; DROP ; DIG 5 ; DROP ; DIG 5 ; DROP ; SWAP ; PAIR } ;
                     DUP ;
                     CAR ;
                     DUP 4 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     PAIR ;
                     SENDER ;
                     SELF_ADDRESS ;
                     PAIR ;
                     PAIR ;
                     DIG 7 ;
                     SWAP ;
                     EXEC ;
                     DUP 4 ;
                     DUP 6 ;
                     DIG 5 ;
                     CAR ;
                     SUB ;
                     ABS ;
                     UPDATE 1 ;
                     DUP ;
                     DIG 7 ;
                     DUP 5 ;
                     GET 13 ;
                     DIG 3 ;
                     CAR ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     UPDATE 3 ;
                     DUP 3 ;
                     DIG 5 ;
                     DIG 4 ;
                     GET 3 ;
                     SUB ;
                     ABS ;
                     UPDATE 3 ;
                     DIG 3 ;
                     CDR ;
                     DIG 3 ;
                     CONS ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     UPDATE 3 ;
                     DUP ;
                     GET 4 ;
                     DUP 3 ;
                     CDR ;
                     SOME ;
                     SENDER ;
                     UPDATE ;
                     UPDATE 4 ;
                     SWAP ;
                     CAR ;
                     CAR ;
                     PAIR }
                   { DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 2 ;
                     DROP ;
                     DIG 3 ;
                     DROP ;
                     DIG 3 ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     SWAP ;
                     DIG 2 ;
                     GET 3 ;
                     DUP ;
                     GET 24 ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     CAR ;
                     CAR ;
                     CONTRACT %withdrawProfit address ;
                     IF_NONE { PUSH string "CANNOT_INVOKE_QUIPU_WITHDRAW_PROFIT" ; FAILWITH } {} ;
                     NIL operation ;
                     SWAP ;
                     PUSH mutez 0 ;
                     DIG 3 ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     PAIR } } } } }
