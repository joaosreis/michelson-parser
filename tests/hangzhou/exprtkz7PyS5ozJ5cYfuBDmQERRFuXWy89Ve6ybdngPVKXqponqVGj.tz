{ parameter
    (or (or (or (address %addToWhitelist) (unit %claim))
            (or (unit %default) (set %distribute address)))
        (or (address %removeFromWhitelist) (address %withdraw))) ;
  storage
    (pair (big_map %metadata string bytes)
          (pair (pair %sale
                   (pair %token (address %address) (nat %tokenId))
                   (pair (mutez %price)
                         (pair (mutez %priceDiscount)
                               (pair (nat %soldAmount)
                                     (pair (nat %saleSupply)
                                           (pair (timestamp %startTime)
                                                 (pair (timestamp %endTime)
                                                       (pair (timestamp %claimStartTime)
                                                             (pair (timestamp %lockEndTime) (pair (nat %lockFactor) (set %whitelist address)))))))))))
                (pair (big_map %ledger
                         address
                         (pair (nat %amount) (pair (nat %amountLocked) (mutez %amountXtz))))
                      (address %admin)))) ;
  code { LAMBDA
           (pair (pair address address) (pair (pair address nat) nat))
           operation
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             DUP ;
             CAR ;
             CONTRACT %transfer
               (list (pair (address %from_)
                           (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
             IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
             PUSH mutez 0 ;
             NIL (pair address (list (pair address (pair nat nat)))) ;
             DIG 5 ;
             NIL (pair address (pair nat nat)) ;
             DIG 7 ;
             DIG 6 ;
             CDR ;
             DIG 7 ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             CONS ;
             SWAP ;
             PAIR ;
             CONS ;
             TRANSFER_TOKENS } ;
         PUSH nat 100000000 ;
         NIL operation ;
         LAMBDA
           (pair address
                 (pair (big_map string bytes)
                       (pair (pair (pair address nat)
                                   (pair mutez
                                         (pair mutez
                                               (pair nat
                                                     (pair nat
                                                           (pair timestamp
                                                                 (pair timestamp (pair timestamp (pair timestamp (pair nat (set address)))))))))))
                             (pair (big_map address (pair nat (pair nat mutez))) address))))
           (pair nat (pair nat mutez))
           { UNPAIR ;
             SWAP ;
             GET 5 ;
             SWAP ;
             GET ;
             IF_NONE
               { PUSH nat 0 ; PUSH nat 0 ; PUSH mutez 0 ; SWAP ; PAIR ; SWAP ; PAIR }
               {} } ;
         LAMBDA
           (pair address mutez)
           operation
           { UNPAIR ;
             CONTRACT unit ;
             IF_NONE { PUSH string "INVALID_DESTINATION" ; FAILWITH } {} ;
             SWAP ;
             UNIT ;
             TRANSFER_TOKENS } ;
         DIG 5 ;
         UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { DIG 2 ;
                 DIG 5 ;
                 DROP 2 ;
                 IF_LEFT
                   { DIG 2 ;
                     DIG 4 ;
                     DROP 2 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 6 ;
                     SENDER ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUP ;
                     DUG 3 ;
                     GET 3 ;
                     DIG 3 ;
                     GET 3 ;
                     GET 20 ;
                     DIG 3 ;
                     PUSH bool True ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 20 ;
                     UPDATE 3 ;
                     SWAP ;
                     PAIR }
                   { DIG 3 ;
                     DROP 2 ;
                     DUP ;
                     GET 3 ;
                     GET 15 ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     IF { PUSH string "CLAIM_NOT_STARTED" ; FAILWITH } {} ;
                     DUP ;
                     SENDER ;
                     PAIR ;
                     DIG 2 ;
                     SWAP ;
                     EXEC ;
                     PUSH nat 0 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     COMPARE ;
                     LE ;
                     IF { PUSH string "NOTHING_TO_CLAIM" ; FAILWITH } {} ;
                     DUP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     PAIR ;
                     DUP 3 ;
                     GET 3 ;
                     GET 17 ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     IF { SWAP ;
                          DUP ;
                          DUG 2 ;
                          GET 3 ;
                          DIG 2 ;
                          CAR ;
                          SUB ;
                          ABS ;
                          SWAP ;
                          CDR ;
                          SWAP ;
                          PAIR }
                        { SWAP ; PUSH nat 0 ; UPDATE 3 ; SWAP ; CAR ; PAIR } ;
                     DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     PUSH nat 0 ;
                     DUP 3 ;
                     COMPARE ;
                     LE ;
                     IF { PUSH string "NOTHING_TO_CLAIM" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     DUP 4 ;
                     GET 3 ;
                     CAR ;
                     PAIR ;
                     SENDER ;
                     SELF_ADDRESS ;
                     PAIR ;
                     PAIR ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     DIG 3 ;
                     DIG 3 ;
                     CAR ;
                     SUB ;
                     ABS ;
                     UPDATE 1 ;
                     DIG 2 ;
                     DUP ;
                     GET 5 ;
                     DIG 2 ;
                     SOME ;
                     SENDER ;
                     UPDATE ;
                     UPDATE 5 ;
                     NIL operation ;
                     DIG 2 ;
                     CONS ;
                     PAIR } }
               { DIG 4 ;
                 DIG 6 ;
                 DROP 2 ;
                 IF_LEFT
                   { DROP ;
                     DUP ;
                     GET 3 ;
                     GET 11 ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     IF { PUSH string "SALE_NOT_STARTED" ; FAILWITH } {} ;
                     DUP ;
                     GET 3 ;
                     GET 13 ;
                     NOW ;
                     COMPARE ;
                     GT ;
                     IF { PUSH string "SALE_ENDED" ; FAILWITH } {} ;
                     PUSH mutez 0 ;
                     AMOUNT ;
                     COMPARE ;
                     LE ;
                     IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                     DUP ;
                     GET 3 ;
                     GET 9 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     GET 7 ;
                     COMPARE ;
                     GE ;
                     IF { PUSH string "SOLD_OUT" ; FAILWITH } {} ;
                     PUSH bool True ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     GET 20 ;
                     SENDER ;
                     MEM ;
                     COMPARE ;
                     EQ ;
                     IF { DUP ; GET 3 ; GET 5 } { DUP ; GET 3 ; GET 3 } ;
                     PUSH nat 1000000 ;
                     DUP 6 ;
                     DUP 3 ;
                     PUSH nat 1000000 ;
                     AMOUNT ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     DUP 3 ;
                     GET 3 ;
                     GET 9 ;
                     DUP 4 ;
                     GET 3 ;
                     GET 7 ;
                     DUP 3 ;
                     ADD ;
                     COMPARE ;
                     GT ;
                     IF { DROP ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          GET 3 ;
                          GET 7 ;
                          DUP 3 ;
                          GET 3 ;
                          GET 9 ;
                          SUB ;
                          ABS ;
                          PUSH nat 1000000 ;
                          DIG 2 ;
                          DIG 6 ;
                          PUSH nat 1000000 ;
                          DUP 5 ;
                          MUL ;
                          EDIV ;
                          IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                          CAR ;
                          MUL ;
                          EDIV ;
                          IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                          CAR ;
                          AMOUNT ;
                          SUB ;
                          PAIR }
                        { SWAP ; DIG 5 ; DROP 2 ; PUSH mutez 0 ; PAIR } ;
                     DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     DUP 3 ;
                     SENDER ;
                     PAIR ;
                     DIG 5 ;
                     SWAP ;
                     EXEC ;
                     PUSH mutez 25000000 ;
                     DUP 4 ;
                     AMOUNT ;
                     DUP 4 ;
                     GET 4 ;
                     ADD ;
                     SUB ;
                     COMPARE ;
                     LT ;
                     IF { PUSH string "MIN_AMOUNT_NOT_MET" ; FAILWITH } {} ;
                     DUP ;
                     DUP 3 ;
                     DIG 2 ;
                     CAR ;
                     ADD ;
                     UPDATE 1 ;
                     DUP ;
                     PUSH nat 100 ;
                     DUP 6 ;
                     GET 3 ;
                     GET 19 ;
                     DUP 5 ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     DIG 2 ;
                     GET 3 ;
                     ADD ;
                     UPDATE 3 ;
                     DUP ;
                     DUP 4 ;
                     AMOUNT ;
                     SUB ;
                     DIG 2 ;
                     GET 4 ;
                     ADD ;
                     UPDATE 4 ;
                     DIG 3 ;
                     DUP ;
                     DUP ;
                     DUG 5 ;
                     GET 3 ;
                     DIG 3 ;
                     DIG 5 ;
                     GET 3 ;
                     GET 7 ;
                     ADD ;
                     UPDATE 7 ;
                     UPDATE 3 ;
                     DUP ;
                     GET 5 ;
                     DIG 2 ;
                     SOME ;
                     SENDER ;
                     UPDATE ;
                     UPDATE 5 ;
                     NIL operation ;
                     PUSH mutez 0 ;
                     DUP 4 ;
                     COMPARE ;
                     GT ;
                     IF { DIG 2 ; SENDER ; PAIR ; DIG 3 ; SWAP ; EXEC ; CONS }
                        { DIG 2 ; DIG 3 ; DROP 2 } ;
                     PAIR }
                   { DIG 2 ;
                     DIG 4 ;
                     DROP 2 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 6 ;
                     SENDER ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     GET 9 ;
                     DUP 3 ;
                     GET 3 ;
                     GET 7 ;
                     COMPARE ;
                     LT ;
                     DUP 3 ;
                     GET 3 ;
                     GET 13 ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     AND ;
                     IF { PUSH string "SALE_NOT_ENDED" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     GET 15 ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     IF { PUSH string "CLAIM_NOT_STARTED" ; FAILWITH } {} ;
                     NIL (pair address (pair nat nat)) ;
                     DIG 2 ;
                     PAIR ;
                     SWAP ;
                     ITER { SWAP ;
                            PAIR ;
                            DUP ;
                            CAR ;
                            CDR ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            CAR ;
                            CAR ;
                            DIG 2 ;
                            CDR ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            PAIR ;
                            DUP 5 ;
                            SWAP ;
                            EXEC ;
                            PUSH nat 0 ;
                            SWAP ;
                            CAR ;
                            COMPARE ;
                            GT ;
                            IF { SWAP ;
                                 DUP ;
                                 DUG 2 ;
                                 SWAP ;
                                 DUP ;
                                 DUG 2 ;
                                 PAIR ;
                                 DUP 5 ;
                                 SWAP ;
                                 EXEC ;
                                 DUP ;
                                 DUP ;
                                 DUG 2 ;
                                 CAR ;
                                 PAIR ;
                                 DUP 4 ;
                                 GET 3 ;
                                 GET 17 ;
                                 NOW ;
                                 COMPARE ;
                                 LT ;
                                 IF { SWAP ;
                                      DUP ;
                                      DUG 2 ;
                                      GET 3 ;
                                      DIG 2 ;
                                      CAR ;
                                      SUB ;
                                      ABS ;
                                      SWAP ;
                                      CDR ;
                                      SWAP ;
                                      PAIR }
                                    { SWAP ; PUSH nat 0 ; UPDATE 3 ; SWAP ; CAR ; PAIR } ;
                                 DUP ;
                                 CAR ;
                                 SWAP ;
                                 CDR ;
                                 DUP ;
                                 DUP 3 ;
                                 DIG 2 ;
                                 CAR ;
                                 SUB ;
                                 ABS ;
                                 UPDATE 1 ;
                                 DIG 4 ;
                                 DUP 4 ;
                                 DUP 6 ;
                                 GET 3 ;
                                 CAR ;
                                 CDR ;
                                 DIG 4 ;
                                 SWAP ;
                                 PAIR ;
                                 SWAP ;
                                 PAIR ;
                                 CONS ;
                                 DIG 3 ;
                                 DUP ;
                                 GET 5 ;
                                 DIG 3 ;
                                 DIG 4 ;
                                 SWAP ;
                                 SOME ;
                                 SWAP ;
                                 UPDATE ;
                                 UPDATE 5 ;
                                 PAIR }
                               { DROP ; PAIR } } ;
                     SWAP ;
                     DROP ;
                     DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     CAR ;
                     SELF_ADDRESS ;
                     SWAP ;
                     CAR ;
                     CONTRACT %transfer
                       (list (pair (address %from_)
                                   (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                     IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
                     PUSH mutez 0 ;
                     NIL (pair address (list (pair address (pair nat nat)))) ;
                     DIG 3 ;
                     DIG 4 ;
                     SWAP ;
                     PAIR ;
                     CONS ;
                     TRANSFER_TOKENS ;
                     SWAP ;
                     NIL operation ;
                     DIG 2 ;
                     CONS ;
                     PAIR } } }
           { DIG 3 ;
             DIG 5 ;
             DROP 2 ;
             IF_LEFT
               { DIG 2 ;
                 DIG 4 ;
                 DROP 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 6 ;
                 SENDER ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 DUP ;
                 DUG 3 ;
                 GET 3 ;
                 DIG 3 ;
                 GET 3 ;
                 GET 20 ;
                 DIG 3 ;
                 PUSH bool False ;
                 SWAP ;
                 UPDATE ;
                 UPDATE 20 ;
                 UPDATE 3 ;
                 SWAP ;
                 PAIR }
               { DIG 3 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 6 ;
                 SENDER ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "INVALID_ACCESS" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 GET 9 ;
                 DUP 3 ;
                 GET 3 ;
                 GET 7 ;
                 COMPARE ;
                 LT ;
                 DUP 3 ;
                 GET 3 ;
                 GET 13 ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 AND ;
                 IF { PUSH string "SALE_NOT_ENDED" ; FAILWITH } {} ;
                 NIL operation ;
                 PUSH mutez 0 ;
                 BALANCE ;
                 COMPARE ;
                 GT ;
                 IF { BALANCE ; DUP 3 ; PAIR ; DIG 4 ; SWAP ; EXEC ; CONS }
                    { DIG 3 ; DROP } ;
                 DUP 3 ;
                 GET 3 ;
                 GET 9 ;
                 DUP 4 ;
                 GET 3 ;
                 GET 7 ;
                 COMPARE ;
                 LT ;
                 IF { DUP 3 ;
                      GET 3 ;
                      GET 7 ;
                      DUP 4 ;
                      GET 3 ;
                      GET 9 ;
                      SUB ;
                      ABS ;
                      DUP 4 ;
                      GET 3 ;
                      CAR ;
                      PAIR ;
                      DIG 2 ;
                      SELF_ADDRESS ;
                      PAIR ;
                      PAIR ;
                      DIG 3 ;
                      SWAP ;
                      EXEC ;
                      CONS }
                    { SWAP ; DIG 3 ; DROP 2 } ;
                 PAIR } } } }
