{ parameter
    (or (list %retrieve_Tacos
           (pair (address %fa2_address) (list %fa2_batch (pair (nat %token_id) (nat %amount)))))
        (list %sell_Tacos
           (pair (address %fa2_address) (list %fa2_batch (pair (nat %token_id) (nat %amount)))))) ;
  storage
    (pair (pair %bid_currency (address %fa2_address) (nat %token_id))
          (pair (nat %salsa_out) (nat %salsa_in))) ;
  code { LAMBDA
           (pair bool string)
           unit
           { UNPAIR ; NOT ; IF { FAILWITH } { DROP ; UNIT } } ;
         LAMBDA
           address
           (lambda address (lambda (pair address (list (pair nat nat))) operation))
           { LAMBDA
               (pair address address)
               (lambda (pair address (list (pair nat nat))) operation)
               { DUP ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 SWAP ;
                 PAIR ;
                 LAMBDA
                   (pair (pair address address) (pair address (list (pair nat nat))))
                   operation
                   { DUP ;
                     CDR ;
                     SWAP ;
                     CAR ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     CAR ;
                     DIG 2 ;
                     DUP ;
                     CDR ;
                     MAP { DIG 2 ; DUP ; DUG 3 ; PAIR } ;
                     DIG 2 ;
                     DROP ;
                     SWAP ;
                     CAR ;
                     CONTRACT %transfer
                       (list (pair (address %from_)
                                   (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                     IF_NONE { PUSH string "Invalid FA2 Address" ; FAILWITH } {} ;
                     PUSH mutez 0 ;
                     NIL (pair address (list (pair address (pair nat nat)))) ;
                     DIG 3 ;
                     DIG 4 ;
                     PAIR ;
                     CONS ;
                     TRANSFER_TOKENS } ;
                 SWAP ;
                 APPLY } ;
             SWAP ;
             APPLY } ;
         DUP ;
         LAMBDA
           (pair (lambda address (lambda address (lambda (pair address (list (pair nat nat))) operation)))
                 (pair (pair (pair (list (pair address (list (pair nat nat)))) address) (pair address nat))
                       (pair address nat)))
           operation
           { DUP ;
             CDR ;
             SWAP ;
             CAR ;
             SWAP ;
             UNPAIR ;
             UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             NIL (pair nat nat) ;
             DIG 2 ;
             DIG 3 ;
             SIZE ;
             MUL ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             CDR ;
             PAIR ;
             CONS ;
             DIG 3 ;
             CAR ;
             PAIR ;
             SWAP ;
             DIG 2 ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             SWAP ;
             EXEC ;
             SWAP ;
             EXEC } ;
         SWAP ;
         APPLY ;
         SWAP ;
         LAMBDA
           (pair (lambda address (lambda address (lambda (pair address (list (pair nat nat))) operation)))
                 (pair (pair (list (pair address (list (pair nat nat)))) address) address))
           (list operation)
           { DUP ;
             CDR ;
             SWAP ;
             CAR ;
             SWAP ;
             UNPAIR ;
             UNPAIR ;
             MAP { DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   SWAP ;
                   EXEC ;
                   SWAP ;
                   EXEC ;
                   SWAP ;
                   EXEC } ;
             SWAP ;
             DROP ;
             SWAP ;
             DROP ;
             SWAP ;
             DROP } ;
         SWAP ;
         APPLY ;
         DIG 3 ;
         UNPAIR ;
         IF_LEFT
           { PUSH string "Amount must be 0mutez" ;
             PUSH mutez 0 ;
             AMOUNT ;
             COMPARE ;
             EQ ;
             PAIR ;
             DIG 5 ;
             SWAP ;
             EXEC ;
             DROP ;
             SENDER ;
             SELF_ADDRESS ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             PAIR ;
             PAIR ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CDR ;
             CDR ;
             SELF_ADDRESS ;
             PAIR ;
             SENDER ;
             DIG 4 ;
             PAIR ;
             PAIR ;
             PAIR ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             CONS ;
             PAIR }
           { PUSH string "Amount must be 0mutez" ;
             PUSH mutez 0 ;
             AMOUNT ;
             COMPARE ;
             EQ ;
             PAIR ;
             DIG 5 ;
             SWAP ;
             EXEC ;
             DROP ;
             SELF_ADDRESS ;
             SENDER ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             PAIR ;
             PAIR ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CDR ;
             CAR ;
             SENDER ;
             PAIR ;
             SELF_ADDRESS ;
             DIG 4 ;
             PAIR ;
             PAIR ;
             PAIR ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             CONS ;
             PAIR } } }
