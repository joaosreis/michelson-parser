{ parameter
    (or (or (or (or (set %addToWhitelist address) (nat %deposit))
                (or (unit %harvest) (address %removeFromWhitelist)))
            (or (or (address %updateAdmin)
                    (pair %updateIfo
                       (pair %lpToken
                          (address %address)
                          (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                       (pair (pair %offeringToken
                                (address %address)
                                (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                             (pair (nat %raisingGoal)
                                   (pair (nat %offeringSupply)
                                         (pair (nat %minAmount)
                                               (pair (nat %maxAmount)
                                                     (pair (timestamp %startTime)
                                                           (pair (timestamp %endTime) (pair (timestamp %harvestTime) (nat %lockFactor)))))))))))
                (or (timestamp %updateLock) (bool %updateWhitelistEnabled))))
        (address %withdraw)) ;
  storage
    (pair (big_map %metadata string bytes)
          (pair (pair %ifo
                   (pair %lpToken
                      (address %address)
                      (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                   (pair (pair %offeringToken
                            (address %address)
                            (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                         (pair (nat %raisingGoal)
                               (pair (nat %totalRaised)
                                     (pair (nat %offeringSupply)
                                           (pair (nat %minAmount)
                                                 (pair (nat %maxAmount)
                                                       (pair (timestamp %startTime)
                                                             (pair (timestamp %endTime)
                                                                   (pair (timestamp %harvestTime)
                                                                         (pair (timestamp %lockEndTime)
                                                                               (pair (nat %lockFactor) (pair (bool %whitelistEnabled) (set %whitelist address))))))))))))))
                (pair (big_map %ledger address (pair (nat %amount) (nat %amountLocked)))
                      (address %admin)))) ;
  code { LAMBDA
           (pair (pair address address) (pair (pair address (pair nat (or unit unit))) nat))
           operation
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             DUP ;
             GET 4 ;
             IF_LEFT
               { DROP ;
                 CAR ;
                 CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))) ;
                 IF_NONE { PUSH string "CANNOT_INVOKE_FA1_TRANSFER" ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 DIG 3 ;
                 DIG 4 ;
                 DIG 4 ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 TRANSFER_TOKENS }
               { DROP ;
                 DUP ;
                 CAR ;
                 CONTRACT %transfer
                   (list (pair (address %from_)
                               (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                 IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 NIL (pair address (list (pair address (pair nat nat)))) ;
                 DIG 5 ;
                 NIL (pair address (pair nat nat)) ;
                 DIG 7 ;
                 DIG 6 ;
                 GET 3 ;
                 DIG 7 ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 CONS ;
                 SWAP ;
                 PAIR ;
                 CONS ;
                 TRANSFER_TOKENS } } ;
         NIL operation ;
         PUSH nat 1000000000000000000 ;
         LAMBDA
           (pair (big_map string bytes)
                 (pair (pair (pair address (pair nat (or unit unit)))
                             (pair (pair address (pair nat (or unit unit)))
                                   (pair nat
                                         (pair nat
                                               (pair nat
                                                     (pair nat
                                                           (pair nat
                                                                 (pair timestamp
                                                                       (pair timestamp (pair timestamp (pair timestamp (pair nat (pair bool (set address))))))))))))))
                       (pair (big_map address (pair nat nat)) address)))
           unit
           { GET 6 ;
             SENDER ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "INVALID_ACCESS" ; FAILWITH } { PUSH unit Unit } } ;
         LAMBDA
           (pair address
                 (pair (big_map string bytes)
                       (pair (pair (pair address (pair nat (or unit unit)))
                                   (pair (pair address (pair nat (or unit unit)))
                                         (pair nat
                                               (pair nat
                                                     (pair nat
                                                           (pair nat
                                                                 (pair nat
                                                                       (pair timestamp
                                                                             (pair timestamp (pair timestamp (pair timestamp (pair nat (pair bool (set address))))))))))))))
                             (pair (big_map address (pair nat nat)) address))))
           (pair nat nat)
           { UNPAIR ;
             SWAP ;
             GET 5 ;
             SWAP ;
             GET ;
             IF_NONE { PUSH nat 0 ; PUSH nat 0 ; SWAP ; PAIR } {} } ;
         DUP 3 ;
         LAMBDA
           (pair nat
                 (pair nat
                       (pair (big_map string bytes)
                             (pair (pair (pair address (pair nat (or unit unit)))
                                         (pair (pair address (pair nat (or unit unit)))
                                               (pair nat
                                                     (pair nat
                                                           (pair nat
                                                                 (pair nat
                                                                       (pair nat
                                                                             (pair timestamp
                                                                                   (pair timestamp (pair timestamp (pair timestamp (pair nat (pair bool (set address))))))))))))))
                                   (pair (big_map address (pair nat nat)) address)))))
           nat
           { UNPAIR ;
             SWAP ;
             UNPAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET 3 ;
             GET 5 ;
             DIG 2 ;
             GET 3 ;
             GET 7 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             GT ;
             IF { SWAP ; DROP } { DROP } ;
             DUG 2 ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR } ;
         SWAP ;
         APPLY ;
         DUP 4 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         PAIR ;
         LAMBDA
           (pair (pair (lambda
                          (pair nat
                                (pair (big_map string bytes)
                                      (pair (pair (pair address (pair nat (or unit unit)))
                                                  (pair (pair address (pair nat (or unit unit)))
                                                        (pair nat
                                                              (pair nat
                                                                    (pair nat
                                                                          (pair nat
                                                                                (pair nat
                                                                                      (pair timestamp
                                                                                            (pair timestamp (pair timestamp (pair timestamp (pair nat (pair bool (set address))))))))))))))
                                            (pair (big_map address (pair nat nat)) address))))
                          nat)
                       nat)
                 (pair nat
                       (pair (big_map string bytes)
                             (pair (pair (pair address (pair nat (or unit unit)))
                                         (pair (pair address (pair nat (or unit unit)))
                                               (pair nat
                                                     (pair nat
                                                           (pair nat
                                                                 (pair nat
                                                                       (pair nat
                                                                             (pair timestamp
                                                                                   (pair timestamp (pair timestamp (pair timestamp (pair nat (pair bool (set address))))))))))))))
                                   (pair (big_map address (pair nat nat)) address)))))
           nat
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             SWAP ;
             PAIR ;
             DIG 2 ;
             SWAP ;
             EXEC ;
             DUG 2 ;
             DUP ;
             DUG 3 ;
             GET 3 ;
             GET 9 ;
             DIG 2 ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET 3 ;
             GET 5 ;
             DIG 2 ;
             GET 3 ;
             GET 7 ;
             COMPARE ;
             LT ;
             IF { PUSH nat 100 ;
                  PUSH nat 10 ;
                  DUP 3 ;
                  MUL ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  ADD }
                {} } ;
         SWAP ;
         APPLY ;
         DIG 7 ;
         UNPAIR ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         GT ;
         IF { PUSH string "INVALID_AMOUNT_TEZ_REFUSED" ; FAILWITH } {} ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { DIG 2 ;
                     DIG 3 ;
                     DIG 6 ;
                     DROP 3 ;
                     IF_LEFT
                       { DIG 2 ;
                         DIG 5 ;
                         DROP 2 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         DIG 3 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         ITER { SWAP ;
                                PAIR ;
                                DUP ;
                                CAR ;
                                DUP ;
                                DUP ;
                                DUG 2 ;
                                GET 3 ;
                                DIG 2 ;
                                GET 3 ;
                                GET 26 ;
                                DIG 3 ;
                                CDR ;
                                PUSH bool True ;
                                SWAP ;
                                UPDATE ;
                                UPDATE 26 ;
                                UPDATE 3 } ;
                         SWAP ;
                         PAIR }
                       { DIG 3 ;
                         DIG 4 ;
                         DROP 2 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 3 ;
                         GET 15 ;
                         NOW ;
                         COMPARE ;
                         LT ;
                         IF { PUSH string "IFO_NOT_STARTED" ; FAILWITH } {} ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 3 ;
                         GET 17 ;
                         NOW ;
                         COMPARE ;
                         GT ;
                         IF { PUSH string "IFO_ENDED" ; FAILWITH } {} ;
                         PUSH bool False ;
                         DUP 3 ;
                         GET 3 ;
                         GET 26 ;
                         SENDER ;
                         MEM ;
                         COMPARE ;
                         EQ ;
                         PUSH bool True ;
                         DUP 4 ;
                         GET 3 ;
                         GET 25 ;
                         COMPARE ;
                         EQ ;
                         AND ;
                         IF { PUSH string "INVALID_USER" ; FAILWITH } {} ;
                         PUSH nat 1 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         COMPARE ;
                         LT ;
                         IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         SENDER ;
                         PAIR ;
                         DIG 3 ;
                         SWAP ;
                         EXEC ;
                         DUP 3 ;
                         GET 3 ;
                         GET 11 ;
                         DUP 3 ;
                         DUP 3 ;
                         CAR ;
                         ADD ;
                         COMPARE ;
                         LT ;
                         PUSH nat 0 ;
                         DUP 5 ;
                         GET 3 ;
                         GET 11 ;
                         COMPARE ;
                         GT ;
                         AND ;
                         IF { PUSH string "MIN_AMOUNT_NOT_MET" ; FAILWITH } {} ;
                         DUP 3 ;
                         GET 3 ;
                         GET 13 ;
                         DUP 3 ;
                         DUP 3 ;
                         CAR ;
                         ADD ;
                         COMPARE ;
                         GT ;
                         PUSH nat 0 ;
                         DUP 5 ;
                         GET 3 ;
                         GET 13 ;
                         COMPARE ;
                         GT ;
                         AND ;
                         IF { PUSH string "MAX_AMOUNT_EXCEEDED" ; FAILWITH } {} ;
                         DUP ;
                         DUP 3 ;
                         DIG 2 ;
                         CAR ;
                         ADD ;
                         UPDATE 1 ;
                         DUP ;
                         PUSH nat 100 ;
                         DUP 5 ;
                         GET 3 ;
                         GET 23 ;
                         DUP 5 ;
                         MUL ;
                         EDIV ;
                         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                         CAR ;
                         DIG 2 ;
                         CDR ;
                         ADD ;
                         UPDATE 2 ;
                         DIG 2 ;
                         DUP ;
                         DUP ;
                         DUG 4 ;
                         GET 3 ;
                         DUP 4 ;
                         DIG 5 ;
                         GET 3 ;
                         GET 7 ;
                         ADD ;
                         UPDATE 7 ;
                         UPDATE 3 ;
                         DUP ;
                         GET 5 ;
                         DIG 2 ;
                         SOME ;
                         SENDER ;
                         UPDATE ;
                         UPDATE 5 ;
                         DUP ;
                         DUG 2 ;
                         GET 3 ;
                         CAR ;
                         PAIR ;
                         SELF_ADDRESS ;
                         SENDER ;
                         PAIR ;
                         PAIR ;
                         DIG 2 ;
                         SWAP ;
                         EXEC ;
                         SWAP ;
                         NIL operation ;
                         DIG 2 ;
                         CONS ;
                         PAIR } }
                   { IF_LEFT
                       { DIG 5 ;
                         DIG 7 ;
                         DROP 3 ;
                         DUP ;
                         GET 3 ;
                         GET 19 ;
                         NOW ;
                         COMPARE ;
                         LT ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 3 ;
                         GET 17 ;
                         NOW ;
                         COMPARE ;
                         LT ;
                         OR ;
                         IF { PUSH string "NOT_HARVEST_TIME" ; FAILWITH } {} ;
                         DUP ;
                         SENDER ;
                         PAIR ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         PUSH nat 1 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         COMPARE ;
                         LT ;
                         IF { PUSH string "NOTHING_TO_HARVEST" ; FAILWITH } {} ;
                         DUP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         PAIR ;
                         DUP 3 ;
                         GET 3 ;
                         GET 21 ;
                         NOW ;
                         COMPARE ;
                         LT ;
                         IF { SWAP ;
                              DUP ;
                              DUG 2 ;
                              CDR ;
                              DIG 2 ;
                              CAR ;
                              SUB ;
                              ABS ;
                              SWAP ;
                              CDR ;
                              SWAP ;
                              PAIR }
                            { SWAP ; PUSH nat 0 ; UPDATE 2 ; SWAP ; CAR ; PAIR } ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         NIL operation ;
                         DUP 4 ;
                         DUP 4 ;
                         PAIR ;
                         DIG 5 ;
                         SWAP ;
                         EXEC ;
                         PUSH nat 0 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         COMPARE ;
                         GT ;
                         IF { DUP 5 ;
                              GET 3 ;
                              GET 3 ;
                              PAIR ;
                              SENDER ;
                              SELF_ADDRESS ;
                              PAIR ;
                              PAIR ;
                              DUP 8 ;
                              SWAP ;
                              EXEC ;
                              CONS }
                            { DROP } ;
                         DUP 4 ;
                         DUP 4 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 3 ;
                         GET 5 ;
                         DUP 3 ;
                         GET 3 ;
                         GET 7 ;
                         COMPARE ;
                         GT ;
                         IF { SWAP ;
                              DUP ;
                              DUG 2 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              PAIR ;
                              DIG 7 ;
                              SWAP ;
                              EXEC ;
                              DIG 7 ;
                              DIG 3 ;
                              GET 3 ;
                              GET 5 ;
                              DIG 2 ;
                              MUL ;
                              EDIV ;
                              IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                              CAR ;
                              SWAP ;
                              SUB ;
                              ABS }
                            { SWAP ; DIG 6 ; DIG 7 ; DROP 4 ; PUSH nat 0 } ;
                         PUSH nat 0 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         COMPARE ;
                         GT ;
                         IF { DUP 5 ;
                              GET 3 ;
                              CAR ;
                              PAIR ;
                              SENDER ;
                              SELF_ADDRESS ;
                              PAIR ;
                              PAIR ;
                              DIG 5 ;
                              SWAP ;
                              EXEC ;
                              CONS }
                            { DIG 5 ; DROP 2 } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         DIG 3 ;
                         DIG 3 ;
                         CAR ;
                         SUB ;
                         ABS ;
                         UPDATE 1 ;
                         DIG 2 ;
                         DUP ;
                         GET 5 ;
                         DIG 2 ;
                         SOME ;
                         SENDER ;
                         UPDATE ;
                         UPDATE 5 ;
                         SWAP ;
                         PAIR }
                       { DIG 2 ;
                         DIG 3 ;
                         DIG 4 ;
                         DIG 6 ;
                         DIG 8 ;
                         DROP 5 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         DIG 3 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         DUP ;
                         DUG 3 ;
                         GET 3 ;
                         DIG 3 ;
                         GET 3 ;
                         GET 26 ;
                         DIG 3 ;
                         PUSH bool False ;
                         SWAP ;
                         UPDATE ;
                         UPDATE 26 ;
                         UPDATE 3 ;
                         SWAP ;
                         PAIR } } }
               { DIG 2 ;
                 DIG 3 ;
                 DIG 4 ;
                 DIG 6 ;
                 DIG 8 ;
                 DROP 5 ;
                 IF_LEFT
                   { IF_LEFT
                       { SWAP ; DUP ; DUG 2 ; DIG 3 ; SWAP ; EXEC ; DROP ; UPDATE 6 ; SWAP ; PAIR }
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         DIG 3 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         GET 3 ;
                         DUP 3 ;
                         CAR ;
                         UPDATE 1 ;
                         DUP 3 ;
                         GET 3 ;
                         UPDATE 3 ;
                         DUP 3 ;
                         GET 5 ;
                         UPDATE 5 ;
                         DUP 3 ;
                         GET 7 ;
                         UPDATE 9 ;
                         DUP 3 ;
                         GET 9 ;
                         UPDATE 11 ;
                         DUP 3 ;
                         GET 11 ;
                         UPDATE 13 ;
                         DUP 3 ;
                         GET 13 ;
                         UPDATE 15 ;
                         DUP 3 ;
                         GET 15 ;
                         UPDATE 17 ;
                         DUP 3 ;
                         GET 17 ;
                         UPDATE 19 ;
                         DIG 2 ;
                         GET 18 ;
                         UPDATE 23 ;
                         UPDATE 3 ;
                         SWAP ;
                         PAIR } }
                   { IF_LEFT
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         DIG 3 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         GET 3 ;
                         DIG 2 ;
                         UPDATE 21 ;
                         UPDATE 3 ;
                         SWAP ;
                         PAIR }
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         DIG 3 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         GET 3 ;
                         DIG 2 ;
                         UPDATE 25 ;
                         UPDATE 3 ;
                         SWAP ;
                         PAIR } } } }
           { DIG 3 ;
             DIG 4 ;
             DIG 6 ;
             DIG 7 ;
             DROP 4 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             DIG 4 ;
             SWAP ;
             EXEC ;
             DROP ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET 3 ;
             GET 17 ;
             NOW ;
             COMPARE ;
             LT ;
             IF { PUSH string "IFO_NOT_ENDED" ; FAILWITH } {} ;
             NIL operation ;
             DUP 3 ;
             GET 3 ;
             GET 5 ;
             DUP 4 ;
             GET 3 ;
             GET 7 ;
             COMPARE ;
             LT ;
             IF { DIG 2 ;
                  DUP ;
                  DUP ;
                  DUG 4 ;
                  GET 3 ;
                  GET 7 ;
                  PAIR ;
                  DIG 4 ;
                  SWAP ;
                  EXEC ;
                  DUP 4 ;
                  GET 3 ;
                  GET 9 ;
                  SUB ;
                  ABS ;
                  PUSH nat 0 ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  COMPARE ;
                  GT ;
                  IF { DUP 4 ;
                       GET 3 ;
                       GET 3 ;
                       PAIR ;
                       DUP 3 ;
                       SELF_ADDRESS ;
                       PAIR ;
                       PAIR ;
                       DUP 5 ;
                       SWAP ;
                       EXEC ;
                       CONS }
                     { DROP } }
                { DIG 3 ; DROP } ;
             DUP 3 ;
             GET 3 ;
             GET 5 ;
             DUP 4 ;
             GET 3 ;
             GET 7 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             LT ;
             IF { SWAP ; DROP } { DROP } ;
             DUP 4 ;
             GET 3 ;
             CAR ;
             PAIR ;
             DIG 2 ;
             SELF_ADDRESS ;
             PAIR ;
             PAIR ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             CONS ;
             PAIR } } }
